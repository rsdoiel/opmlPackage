<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Fri, 24 May 2024 12:21:34 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: opmlPackage</title>
		<dateCreated>Mon, 28 Jun 2021 19:23:08 GMT</dateCreated>
		<dateModified>Fri, 24 May 2024 12:21:34 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>82</windowTop>
		<windowLeft>726</windowLeft>
		<windowBottom>1078</windowBottom>
		<windowRight>1801</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/opmlpackage/">
			<outline text="worknotes.md" created="Mon, 28 Jun 2021 19:25:17 GMT">
				<outline text="#### 5/24/24; 8:12:30 AM by DW" created="Fri, 24 May 2024 12:12:29 GMT">
					<outline text="Fixed a problem &lt;a href=&quot;https://github.com/scripting/opmlPackage/issues/12&quot;&gt;reported&lt;/a&gt; on GitHub where we were declaring htmltext and indentlevel incorrectly. " created="Fri, 24 May 2024 12:12:30 GMT">
						<outline text="* `var htmltext = &quot;&quot;; indentlevel = 0;`" created="Fri, 24 May 2024 12:13:42 GMT"/>
						</outline>
					<outline text="Replaced the first semicolon with a comma. " created="Thu, 10 Jun 2021 18:52:52 GMT"/>
					<outline text="The problem appeared in two places, in the Node package and in the code to be included with a client app." created="Fri, 24 May 2024 12:14:39 GMT"/>
					</outline>
				<outline text="#### 8/20/23; 10:31:38 AM by DW" created="Sun, 20 Aug 2023 14:31:35 GMT">
					<outline text="Changed the generator message on OPML files we generate to include the address of the NPM package." created="Sun, 20 Aug 2023 14:31:39 GMT"/>
					<outline text="Changed the private notes file to this file, worknotes.md. The format changed, so some of the earlier notes might not be as pretty as they were. This is becoming standard practice in all my projects." created="Sun, 20 Aug 2023 14:32:12 GMT"/>
					</outline>
				<outline text="#### 1/8/22; 10:57:35 AM by DW" created="Sat, 08 Jan 2022 15:57:34 GMT">
					<outline text="I undid the changes made on the 7th. " created="Sat, 08 Jan 2022 15:57:36 GMT"/>
					<outline text="I had decided earlier to not try to handle head-level atts in the first attempt at interop. There are too many variables, and I don't understand enough of the issues. It's the proverbial can of worms." created="Sat, 08 Jan 2022 15:57:45 GMT"/>
					</outline>
				<outline text="#### 1/7/22; 1:43:05 PM by DW" created="Fri, 07 Jan 2022 18:43:04 GMT">
					<outline text="Support for head-level atts when reading a markdown file." created="Fri, 07 Jan 2022 18:43:05 GMT"/>
					</outline>
				<outline text="#### 1/4/22; 5:40:31 PM by DW" created="Tue, 04 Jan 2022 22:40:31 GMT">
					<outline text="Added example code for markdown/outline functions." created="Tue, 04 Jan 2022 22:40:32 GMT"/>
					<outline text="Added expandInclude in Node package. " created="Tue, 04 Jan 2022 22:40:42 GMT"/>
					</outline>
				<outline text="#### 1/3/22; 5:52:48 PM by DW" created="Mon, 03 Jan 2022 22:52:48 GMT">
					<outline text="Added commoncode.js because some code can run equally well on server and client. " created="Mon, 03 Jan 2022 22:52:49 GMT"/>
					</outline>
				<outline text="#### 9/24/21; 2:18:33 PM by DW" created="Fri, 24 Sep 2021 18:18:33 GMT">
					<outline text="New entry-point in client code, opml.read. " created="Fri, 24 Sep 2021 18:18:34 GMT"/>
					<outline text="Started an Updates section in the readme. " created="Fri, 24 Sep 2021 18:21:21 GMT"/>
					</outline>
				<outline text="#### 7/1/21; 11:45:06 AM by DW" created="Thu, 01 Jul 2021 15:45:05 GMT">
					<outline text="opml.parse has to take a callback because xml2js.parse does." created="Thu, 01 Jul 2021 15:45:06 GMT"/>
					</outline>
				<outline text="#### 6/28/21; 3:25:22 PM by DW" created="Mon, 28 Jun 2021 19:25:21 GMT">
					<outline text="this is where the toolkit for supporting instant outlines and other stuff will go" created="Mon, 28 Jun 2021 19:25:23 GMT"/>
					<outline text="may incorporate features from other packages" created="Mon, 28 Jun 2021 19:25:45 GMT"/>
					<outline text="the idea is to make it easy for Node devs to support OPML in an interoperable way" created="Mon, 28 Jun 2021 19:25:52 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;opml&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Node and browser-based JavaScript code that reads and writes OPML&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.5.3&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/opmlpackage.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;opmlpackage.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;opmlpackage.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;xml2js&quot;: &quot;*&quot;," created="Wed, 30 Jun 2021 13:10:12 GMT"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opmltojs&quot;: &quot;*&quot;" created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="opmlpackage.js" created="Mon, 08 Mar 2021 15:16:10 GMT">
				<outline text="const myVersion = &quot;0.5.3&quot;, myProductName = &quot;opmlPackage&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="const generatorForHead = &quot;opml v&quot; + myVersion + &quot; (npmjs.com/package/opml)&quot;;" created="Sun, 20 Aug 2023 14:28:22 GMT"/>
				<outline text="" created="Wed, 30 Jun 2021 12:10:35 GMT"/>
				<outline text="exports.parse = parse; "/>
				<outline text="exports.stringify = stringify; "/>
				<outline text="exports.htmlify = getOutlineHtml; "/>
				<outline text="exports.markdownToOutline = markdownToOutline; //1/3/22 by DW"/>
				<outline text="exports.outlineToMarkdown = outlineToMarkdown; //1/3/22 by DW"/>
				<outline text="exports.expandInclude = expandInclude; //1/4/22 by DW" created="Tue, 04 Jan 2022 22:34:39 GMT"/>
				<outline text="exports.visitAll = visitAll; //3/18/22 by DW" created="Tue, 04 Jan 2022 22:34:39 GMT"/>
				<outline text="exports.expandIncludes = expandIncludes; //5/11/22 by DW" created="Wed, 11 May 2022 15:10:37 GMT"/>
				<outline text="exports.readOutline = readOutline; //10/25/22 by DW" created="Tue, 25 Oct 2022 16:29:22 GMT"/>
				<outline text="" created="Wed, 30 Jun 2021 12:12:23 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const opmltojs = require (&quot;opmltojs&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const xml2js = require (&quot;xml2js&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="" created="Wed, 30 Jun 2021 12:10:35 GMT"/>
				<outline text="function parse (opmltext, callback) { //returns a JavaScript object with all the info in the opmltext" created="Wed, 30 Jun 2021 12:10:36 GMT">
					<outline text="Changes" isComment="true">
						<outline text="12/27/21; 10:06:12 AM by DW" created="Mon, 27 Dec 2021 15:06:12 GMT">
							<outline text="Under some circumstances, xml2js.parseString will return a result of null. It shows up in Daytona's log. So we check for it, and if it comes up, return an error. " created="Mon, 27 Dec 2021 15:06:13 GMT"/>
							</outline>
						<outline text="1/18/21; 10:21:27 AM by DW">
							<outline text="I created an OPML format that added a &quot;subs&quot; attribute to each headline that had subs. This was an error, but was still valid OPML, but it caused this code to fail, because subs was the wrong type. It is always a mistake, if it's possible that your OPML will be converted to a JS object. So I protected against it here, and don't copy an attribute called subs if it's present. It's possible that this fix could cause problems too, btw. The code is in Old School, look for saveDayInOpml. "/>
							</outline>
						<outline text="4/18/20; 5:43:20 PM by DW">
							<outline text="Changed the callback to return the standard format, with an err first, and theOutline second. "/>
							<outline text="I didn't want to break all the apps that use this as it was configured, but in the future, use this entry point not the one without the error."/>
							</outline>
						</outline>
					<outline text="function isScalar (obj) {">
						<outline text="if (typeof (obj) == &quot;object&quot;) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addGenerator (theOpml) { //follow the example of RSS 2.0">
						<outline text="try {">
							<outline text="theOpml.head.generator = generatorForHead; //8/20/23 by DW"/>
							<outline text="theOpml.head.generator = myProductName + &quot; v&quot; + myVersion;" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function convert (sourcestruct, deststruct) {">
						<outline text="var atts = sourcestruct [&quot;$&quot;];"/>
						<outline text="if (atts !== undefined) {">
							<outline text="for (var x in atts) {">
								<outline text="if (x != &quot;subs&quot;) { //1/18/21 by DW">
									<outline text="deststruct [x] = atts [x];"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="delete sourcestruct [&quot;$&quot;];"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in sourcestruct) {">
							<outline text="var obj = sourcestruct [x];"/>
							<outline text="if (isScalar (obj)) {">
								<outline text="deststruct [x] = obj;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (x == &quot;outline&quot;) {">
									<outline text="if (deststruct.subs === undefined) {">
										<outline text="deststruct.subs = new Array ();"/>
										<outline text="}"/>
										</outline>
									<outline text="if (Array.isArray (obj)) {">
										<outline text="for (var i = 0; i &lt; obj.length; i++) {">
											<outline text="var newobj = new Object ();"/>
											<outline text="convert (obj [i], newobj);"/>
											<outline text="deststruct.subs.push (newobj);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var newobj = new Object ();"/>
										<outline text="convert (obj, newobj);"/>
										<outline text="deststruct.subs.push (newobj);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="deststruct [x] = new Object ();"/>
									<outline text="convert (obj, deststruct [x]);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="var options = {">
						<outline text="explicitArray: false"/>
						<outline text="};"/>
						</outline>
					<outline text="xml2js.parseString (opmltext, options, function (err, jstruct) {">
						<outline text="if (err) { ">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (jstruct == null) { //12/27/21 by DW" created="Mon, 27 Dec 2021 15:06:51 GMT">
								<outline text="let err = {message: &quot;Internal error: xml2js.parseString returned null.&quot;};" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
								<outline text="callback (err);" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
								<outline text="}" created="Mon, 27 Dec 2021 15:07:04 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 27 Dec 2021 15:07:06 GMT">
								<outline text="var theOutline = {">
									<outline text="opml: new Object ()"/>
									<outline text="}"/>
									</outline>
								<outline text="convert (jstruct.opml, theOutline.opml);"/>
								<outline text="addGenerator (theOutline.opml); //8/6/17 by DW"/>
								<outline text="if (isScalar (theOutline.opml.head)) { //8/6/17 by DW">
									<outline text="theOutline.opml.head = new Object ();"/>
									<outline text="}"/>
									</outline>
								<outline text="if (isScalar (theOutline.opml.body)) { //8/6/17 by DW">
									<outline text="theOutline.opml.body = new Object ();"/>
									<outline text="}"/>
									</outline>
								<outline text="callback (undefined, theOutline);"/>
								<outline text="}" created="Mon, 27 Dec 2021 15:07:08 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="xml2js.parseString (opmltext, options, function (err, jstruct) {" isComment="true">
						<outline text="if (err) { //4/18/20 by DW">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theOutline = {">
								<outline text="opml: new Object ()"/>
								<outline text="}"/>
								</outline>
							<outline text="convert (jstruct.opml, theOutline.opml);"/>
							<outline text="addGenerator (theOutline.opml); //8/6/17 by DW"/>
							<outline text="if (isScalar (theOutline.opml.head)) { //8/6/17 by DW">
								<outline text="theOutline.opml.head = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="if (isScalar (theOutline.opml.body)) { //8/6/17 by DW">
								<outline text="theOutline.opml.body = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, theOutline);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Wed, 30 Jun 2021 12:12:55 GMT"/>
					</outline>
				<outline text="function stringify (theOutline) { //returns the opmltext for the outline" created="Fri, 02 Jul 2021 15:17:20 GMT">
					<outline text="var opmltext = opmltojs.opmlify (theOutline);" created="Thu, 17 Jun 2021 22:19:39 GMT"/>
					<outline text="return (opmltext);" created="Fri, 02 Jul 2021 15:19:13 GMT"/>
					<outline text="}" created="Fri, 02 Jul 2021 15:17:33 GMT"/>
					</outline>
				<outline text="function getOutlineHtml (theOutline) {" created="Thu, 10 Jun 2021 16:51:40 GMT">
					<outline text="var htmltext = &quot;&quot;, indentlevel = 0; //5/24/24 by DW" created="Thu, 10 Jun 2021 18:52:52 GMT"/>
					<outline text="function add (s) {" created="Thu, 10 Jun 2021 18:53:04 GMT">
						<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Thu, 10 Jun 2021 18:57:55 GMT"/>
						<outline text="}" created="Thu, 10 Jun 2021 18:57:50 GMT"/>
						</outline>
					<outline text="function addSubsHtml (node) {" created="Thu, 10 Jun 2021 18:52:07 GMT">
						<outline text="add (&quot;&lt;ul&gt;&quot;); indentlevel++;" created="Thu, 10 Jun 2021 18:54:17 GMT"/>
						<outline text="node.subs.forEach (function (sub) {" created="Thu, 10 Jun 2021 18:54:17 GMT">
							<outline text="add (&quot;&lt;li&gt;&quot; + sub.text + &quot;&lt;/li&gt;&quot;);" created="Thu, 10 Jun 2021 18:54:46 GMT"/>
							<outline text="if (sub.subs !== undefined) {" created="Thu, 10 Jun 2021 18:55:12 GMT">
								<outline text="addSubsHtml (sub);" created="Thu, 10 Jun 2021 18:55:37 GMT"/>
								<outline text="}" created="Thu, 10 Jun 2021 18:55:21 GMT"/>
								</outline>
							<outline text="});" created="Thu, 10 Jun 2021 18:54:26 GMT"/>
							</outline>
						<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;" created="Thu, 10 Jun 2021 18:54:17 GMT"/>
						<outline text="}" created="Thu, 10 Jun 2021 18:52:23 GMT"/>
						</outline>
					<outline text="addSubsHtml (theOutline.opml.body);"/>
					<outline text="return (htmltext);" created="Thu, 10 Jun 2021 16:58:17 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 16:51:51 GMT"/>
					</outline>
				<outline text="function visitAll (theOutline, callback) {" created="Sat, 03 Jul 2021 19:33:13 GMT">
					<outline text="function visitSubs (theNode) {" created="Sat, 03 Jul 2021 19:33:25 GMT">
						<outline text="if (theNode.subs !== undefined) {" created="Sat, 03 Jul 2021 19:34:31 GMT">
							<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {" created="Sat, 03 Jul 2021 19:34:44 GMT">
								<outline text="var theSub = theNode.subs [i];" created="Sat, 03 Jul 2021 19:36:34 GMT"/>
								<outline text="if (!callback (theSub)) {" created="Sat, 03 Jul 2021 19:35:39 GMT">
									<outline text="return (false);" created="Sat, 03 Jul 2021 19:35:50 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 19:35:53 GMT"/>
									</outline>
								<outline text="visitSubs (theSub);" created="Sat, 03 Jul 2021 19:35:59 GMT"/>
								<outline text="}" created="Sat, 03 Jul 2021 19:35:15 GMT"/>
								</outline>
							<outline text="}" created="Sat, 03 Jul 2021 19:34:39 GMT"/>
							</outline>
						<outline text="return (true);" created="Sat, 03 Jul 2021 19:35:50 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 19:34:19 GMT"/>
						</outline>
					<outline text="visitSubs (theOutline.opml.body);" created="Sat, 03 Jul 2021 19:33:26 GMT"/>
					<outline text="}" created="Sat, 03 Jul 2021 19:33:20 GMT"/>
					</outline>
				<outline text="" created="Tue, 04 Jan 2022 17:22:11 GMT"/>
				<outline text="function markdownToOutline (mdtext, options) { //1/3/22 by DW" created="Mon, 03 Jan 2022 22:48:19 GMT">
					<outline text="Changes" isComment="true" created="Mon, 03 Jan 2022 22:50:33 GMT">
						<outline text="1/12/22; 5:17:25 PM by DW" created="Wed, 12 Jan 2022 22:17:24 GMT">
							<outline text="New optional param, options. " created="Wed, 12 Jan 2022 22:17:25 GMT"/>
							<outline text="options.flAddUnderscores, defaults true. " created="Wed, 12 Jan 2022 22:17:36 GMT"/>
							</outline>
						<outline text="1/8/22; 10:54:14 AM by DW" created="Sat, 08 Jan 2022 15:54:14 GMT">
							<outline text="Any atts that show up at the beginning of a file are ignored. Previously they would cause the process to crash." created="Sat, 08 Jan 2022 15:54:14 GMT"/>
							</outline>
						<outline text="1/3/22; 5:50:36 PM by DW" created="Mon, 03 Jan 2022 22:50:34 GMT">
							<outline text="Turn a markdown file as created by LogSeq or a compatible product " created="Mon, 03 Jan 2022 22:50:36 GMT"/>
							<outline text="into an outline structure compatible with the one that is created from " created="Mon, 03 Jan 2022 23:02:44 GMT"/>
							<outline text="parsing OPML text." created="Mon, 03 Jan 2022 23:02:49 GMT"/>
							</outline>
						</outline>
					<outline text="var theOutline = {" created="Thu, 30 Dec 2021 16:10:59 GMT">
						<outline text="opml: {" created="Thu, 30 Dec 2021 16:11:11 GMT">
							<outline text="head: {" created="Thu, 30 Dec 2021 16:11:15 GMT">
								<outline text="}," created="Thu, 30 Dec 2021 16:11:19 GMT"/>
								</outline>
							<outline text="body: {" created="Thu, 30 Dec 2021 16:11:20 GMT">
								<outline text="subs: new Array ()" created="Thu, 30 Dec 2021 16:11:25 GMT"/>
								<outline text="}" created="Thu, 30 Dec 2021 16:11:34 GMT"/>
								</outline>
							<outline text="}" created="Thu, 30 Dec 2021 16:11:14 GMT"/>
							</outline>
						<outline text="};" created="Thu, 30 Dec 2021 16:11:06 GMT"/>
						</outline>
					<outline text="" created="Wed, 12 Jan 2022 22:18:09 GMT"/>
					<outline text="if (options === undefined) { //1/12/22 by DW" created="Wed, 12 Jan 2022 22:18:09 GMT">
						<outline text="options = new Object ();" created="Wed, 12 Jan 2022 22:18:19 GMT"/>
						<outline text="}" created="Wed, 12 Jan 2022 22:18:24 GMT"/>
						</outline>
					<outline text="if (options.flAddUnderscores === undefined) {" created="Wed, 12 Jan 2022 22:18:09 GMT">
						<outline text="options.flAddUnderscores = true;" created="Wed, 12 Jan 2022 22:18:44 GMT"/>
						<outline text="}" created="Wed, 12 Jan 2022 22:18:47 GMT"/>
						</outline>
					<outline text="" created="Wed, 12 Jan 2022 22:18:10 GMT"/>
					<outline text="mdtext = mdtext.toString ();" created="Tue, 04 Jan 2022 17:56:36 GMT"/>
					<outline text="var lines = mdtext.split (&quot;\n&quot;), lastlevel = 0, stack = new Array ();;" created="Tue, 16 Nov 2021 16:37:39 GMT"/>
					<outline text="var lastnode = undefined, currentsubs = theOutline.opml.body.subs;;" created="Fri, 07 Jan 2022 18:37:43 GMT"/>
					<outline text="lines.forEach (function (theLine) {" created="Thu, 30 Dec 2021 15:58:06 GMT">
						<outline text="var thislevel = 0, flInsert = true;" created="Thu, 30 Dec 2021 16:06:17 GMT"/>
						<outline text="while (theLine.length &gt; 0) {" created="Thu, 30 Dec 2021 15:58:29 GMT">
							<outline text="if (theLine [0] != &quot;\t&quot;) {" created="Thu, 30 Dec 2021 16:08:12 GMT">
								<outline text="break;" created="Thu, 30 Dec 2021 16:08:26 GMT"/>
								<outline text="}" created="Thu, 30 Dec 2021 16:08:28 GMT"/>
								</outline>
							<outline text="thislevel++;" created="Thu, 30 Dec 2021 16:05:15 GMT"/>
							<outline text="theLine = utils.stringDelete (theLine, 1, 1);" created="Thu, 30 Dec 2021 16:05:24 GMT"/>
							<outline text="}" created="Thu, 30 Dec 2021 16:04:27 GMT"/>
							</outline>
						<outline text="if (utils.beginsWith (theLine, &quot;- &quot;)) {" created="Thu, 30 Dec 2021 16:09:06 GMT">
							<outline text="theLine = utils.stringDelete (theLine, 1, 2);" created="Thu, 30 Dec 2021 16:09:51 GMT"/>
							<outline text="}" created="Thu, 30 Dec 2021 16:09:23 GMT"/>
							</outline>
						<outline text="else { //is the line an attribute?" created="Fri, 31 Dec 2021 16:44:17 GMT">
							<outline text="if (utils.stringContains (theLine, &quot;:: &quot;)) {" created="Fri, 31 Dec 2021 16:44:29 GMT">
								<outline text="let parts = theLine.split (&quot;:: &quot;);" created="Fri, 31 Dec 2021 16:45:34 GMT"/>
								<outline text="if (lastnode !== undefined) { //1/8/22 by DW" created="Fri, 07 Jan 2022 18:40:55 GMT">
									<outline text="var name = (options.flAddUnderscores) ? &quot;_&quot; + parts [0] : parts [0]; //1/12/22 by DW" created="Wed, 12 Jan 2022 22:18:59 GMT"/>
									<outline text="lastnode [name] = parts [1];" created="Fri, 31 Dec 2021 16:47:34 GMT"/>
									<outline text="}" created="Fri, 07 Jan 2022 18:41:06 GMT"/>
									</outline>
								<outline text="flInsert = false;" created="Fri, 31 Dec 2021 17:33:29 GMT"/>
								<outline text="}" created="Fri, 31 Dec 2021 16:45:27 GMT"/>
								</outline>
							<outline text="}" created="Fri, 31 Dec 2021 16:44:20 GMT"/>
							</outline>
						<outline text="if (thislevel &gt; lastlevel) {" created="Thu, 30 Dec 2021 16:12:26 GMT">
							<outline text="stack.push (currentsubs);" created="Thu, 30 Dec 2021 16:14:31 GMT"/>
							<outline text="lastnode.subs = new Array ();" created="Thu, 30 Dec 2021 16:18:53 GMT"/>
							<outline text="currentsubs = lastnode.subs;" created="Thu, 30 Dec 2021 16:19:22 GMT"/>
							<outline text="}" created="Thu, 30 Dec 2021 16:12:36 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 30 Dec 2021 16:12:37 GMT">
							<outline text="if (thislevel &lt; lastlevel) {" created="Thu, 30 Dec 2021 16:12:39 GMT">
								<outline text="var ctpops = lastlevel - thislevel;" created="Thu, 30 Dec 2021 16:21:00 GMT"/>
								<outline text="for (var i = 1; i &lt;= ctpops; i++) {" created="Thu, 30 Dec 2021 16:21:20 GMT">
									<outline text="currentsubs = stack.pop ();" created="Thu, 30 Dec 2021 16:21:41 GMT"/>
									<outline text="}" created="Thu, 30 Dec 2021 16:21:36 GMT"/>
									</outline>
								<outline text="}" created="Thu, 30 Dec 2021 16:12:51 GMT"/>
								</outline>
							<outline text="}" created="Thu, 30 Dec 2021 16:12:52 GMT"/>
							</outline>
						<outline text="" created="Fri, 31 Dec 2021 17:32:08 GMT"/>
						<outline text="if (flInsert) {" created="Fri, 31 Dec 2021 17:36:21 GMT">
							<outline text="var newnode = {" created="Thu, 30 Dec 2021 16:16:31 GMT">
								<outline text="text: theLine" created="Fri, 31 Dec 2021 17:34:19 GMT"/>
								<outline text="}" created="Fri, 31 Dec 2021 17:34:27 GMT"/>
								</outline>
							<outline text="currentsubs.push (newnode);" created="Thu, 30 Dec 2021 16:16:31 GMT"/>
							<outline text="lastnode = newnode;" created="Thu, 30 Dec 2021 16:18:09 GMT"/>
							<outline text="lastlevel = thislevel;" created="Thu, 30 Dec 2021 16:12:26 GMT"/>
							<outline text="}" created="Fri, 31 Dec 2021 17:36:23 GMT"/>
							</outline>
						<outline text="});" created="Thu, 30 Dec 2021 15:58:14 GMT"/>
						</outline>
					<outline text="return (theOutline);" created="Mon, 03 Jan 2022 22:50:27 GMT"/>
					<outline text="}" created="Mon, 03 Jan 2022 22:49:00 GMT"/>
					</outline>
				<outline text="function outlineToMarkdown (theOutline) { //1/3/22 by DW" created="Thu, 30 Dec 2021 19:58:44 GMT">
					<outline text="Changes" isComment="true" created="Mon, 03 Jan 2022 23:02:56 GMT">
						<outline text="1/3/22; 6:03:00 PM by DW" created="Mon, 03 Jan 2022 23:02:58 GMT">
							<outline text="Generate markdown text from the indicated outline structure " created="Mon, 03 Jan 2022 23:03:00 GMT"/>
							<outline text="that can be read by LogSeq and compatible apps. " created="Mon, 03 Jan 2022 23:03:40 GMT"/>
							</outline>
						</outline>
					<outline text="var mdtext = &quot;&quot;, indentlevel = 0;"/>
					<outline text="function add (s) {">
						<outline text="mdtext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Mon, 27 Dec 2021 17:31:10 GMT"/>
						<outline text="}" created="Mon, 27 Dec 2021 17:31:43 GMT"/>
						</outline>
					<outline text="function addAtts (atts) {" created="Sat, 13 Nov 2021 15:56:13 GMT">
						<outline text="for (var x in atts) {" created="Sat, 13 Nov 2021 15:56:25 GMT">
							<outline text="if ((x != &quot;subs&quot;) &amp;&amp; (x != &quot;text&quot;)) {" created="Sat, 13 Nov 2021 15:56:34 GMT">
								<outline text="if (utils.beginsWith (x, &quot;_&quot;)) {" created="Fri, 31 Dec 2021 17:20:16 GMT">
									<outline text="add (utils.stringDelete (x, 1, 1) + &quot;:: &quot; + atts [x]);" created="Sat, 13 Nov 2021 15:56:47 GMT"/>
									<outline text="}" created="Fri, 31 Dec 2021 17:20:28 GMT"/>
									</outline>
								<outline text="}" created="Sat, 13 Nov 2021 15:56:44 GMT"/>
								</outline>
							<outline text="}" created="Sat, 13 Nov 2021 15:56:33 GMT"/>
							</outline>
						<outline text="}" created="Sat, 13 Nov 2021 15:56:22 GMT"/>
						</outline>
					<outline text="function dolevel (theNode) {">
						<outline text="theNode.subs.forEach (function (sub) {" created="Mon, 27 Dec 2021 17:36:00 GMT">
							<outline text="add (&quot;- &quot; + sub.text);"/>
							<outline text="addAtts (sub);" created="Fri, 31 Dec 2021 16:29:32 GMT"/>
							<outline text="if (sub.subs !== undefined) {" created="Fri, 31 Dec 2021 15:43:08 GMT">
								<outline text="indentlevel++;"/>
								<outline text="dolevel (sub);"/>
								<outline text="indentlevel--;"/>
								<outline text="}" created="Fri, 31 Dec 2021 15:43:15 GMT"/>
								</outline>
							<outline text="});" created="Mon, 27 Dec 2021 17:36:29 GMT"/>
							</outline>
						<outline text="}" created="Mon, 27 Dec 2021 17:34:14 GMT"/>
						</outline>
					<outline text="addAtts (theOutline.opml.head);" isComment="true" created="Fri, 31 Dec 2021 16:29:32 GMT"/>
					<outline text="dolevel (theOutline.opml.body)"/>
					<outline text="return (mdtext);" created="Fri, 31 Dec 2021 15:39:22 GMT"/>
					<outline text="}" created="Thu, 30 Dec 2021 19:58:56 GMT"/>
					</outline>
				<outline text="" created="Tue, 04 Jan 2022 22:33:43 GMT"/>
				<outline text="function httpRequest (url, callback) {">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
							<outline text="var code = response.statusCode;" created="Tue, 04 Jan 2022 22:39:15 GMT"/>
							<outline text="if ((code &lt; 200) || (code &gt; 299)) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
								<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
								<outline text="callback ({message});" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
								<outline text="callback (undefined, data) "/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function expandInclude (theNode, callback) {//1/4/22 by DW" created="Mon, 03 Jan 2022 16:42:22 GMT">
					<outline text="Changes" isComment="true" created="Wed, 11 May 2022 12:52:03 GMT">
						<outline text="5/11/22; 8:52:08 AM by DW" created="Wed, 11 May 2022 12:52:07 GMT">
							<outline text="If the node is an include, return the body of the OPML file it points to. " created="Wed, 11 May 2022 12:52:08 GMT"/>
							<outline text="If it's not an include, return the node itself." created="Wed, 11 May 2022 12:53:00 GMT"/>
							<outline text="It's used in the app that converts docserver outlines to markdown for uploading to github." created="Wed, 11 May 2022 12:54:47 GMT">
								<outline text="https://github.com/scripting/docServer/blob/main/markdownapp/docservertomarkdown.js#L124"/>
								</outline>
							</outline>
						</outline>
					<outline text="if ((theNode.type == &quot;include&quot;) &amp;&amp; (theNode.url !== undefined)) {" created="Mon, 03 Jan 2022 16:43:16 GMT">
						<outline text="httpRequest (theNode.url, function (err, opmltext) {" created="Thu, 17 Jun 2021 19:56:51 GMT">
							<outline text="if (err) {" created="Sun, 08 Aug 2021 15:12:18 GMT">
								<outline text="callback (err);" created="Sun, 08 Aug 2021 15:14:05 GMT"/>
								<outline text="}" created="Sun, 08 Aug 2021 15:14:10 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Aug 2021 15:12:29 GMT">
								<outline text="parse (opmltext, function (err, theOutline) {">
									<outline text="if (err) {">
										<outline text="callback (err);" created="Sun, 08 Aug 2021 15:14:05 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (undefined, theOutline.opml.body);" created="Mon, 03 Jan 2022 16:44:53 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Sun, 08 Aug 2021 15:12:31 GMT"/>
								</outline>
							<outline text="})" created="Thu, 17 Jun 2021 19:58:33 GMT"/>
							</outline>
						<outline text="}" created="Mon, 03 Jan 2022 16:43:45 GMT"/>
						</outline>
					<outline text="else {" created="Mon, 03 Jan 2022 16:44:01 GMT">
						<outline text="callback (undefined, theNode);" created="Mon, 03 Jan 2022 16:44:04 GMT"/>
						<outline text="}" created="Mon, 03 Jan 2022 16:44:12 GMT"/>
						</outline>
					<outline text="}" created="Mon, 03 Jan 2022 16:42:34 GMT"/>
					</outline>
				<outline text="function expandIncludes (theOutline, callback) { //5/11/22 by DW" created="Wed, 11 May 2022 14:19:47 GMT">
					<outline text="function expandBody (theBody, callback) {" created="Wed, 11 May 2022 14:20:02 GMT">
						<outline text="var theNewBody = new Object (), lastNewNode = theNewBody, stack = new Array (), currentOutline;"/>
						<outline text="function getNameAtt (theNode) {">
							<outline text="var nameatt = theNode.name;"/>
							<outline text="if (nameatt === undefined) {">
								<outline text="nameatt = utils.innerCaseName (theNode.text);"/>
								<outline text="}"/>
								</outline>
							<outline text="return (nameatt);"/>
							<outline text="}"/>
							</outline>
						<outline text="function inlevelcallback () {">
							<outline text="stack [stack.length] = currentOutline;"/>
							<outline text="currentOutline = lastNewNode;"/>
							<outline text="if (currentOutline.subs === undefined) {">
								<outline text="currentOutline.subs = new Array ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function nodecallback (theNode, path) {">
							<outline text="var newNode = new Object ();"/>
							<outline text="utils.copyScalars (theNode, newNode);"/>
							<outline text="currentOutline.subs [currentOutline.subs.length] = newNode;"/>
							<outline text="lastNewNode = newNode;"/>
							<outline text="}"/>
							</outline>
						<outline text="function outlevelcallback () {">
							<outline text="currentOutline = stack [stack.length - 1];"/>
							<outline text="stack.length--; //pop the stack"/>
							<outline text="}"/>
							</outline>
						<outline text="function bodyVisiter (theOutline, visitcompletecallback) {">
							<outline text="function readInclude (theIncludeNode, callback) {">
								<outline text="console.log (&quot;readInclude: url == &quot; + theIncludeNode.url);"/>
								<outline text="expandInclude (theIncludeNode, function (err, theBody) {" created="Wed, 11 May 2022 14:40:22 GMT">
									<outline text="if (err) {" created="Tue, 10 May 2022 21:45:56 GMT">
										<outline text="callback (undefined);" created="Tue, 10 May 2022 21:46:09 GMT"/>
										<outline text="}" created="Tue, 10 May 2022 21:45:59 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 10 May 2022 21:45:59 GMT">
										<outline text="expandBody (theBody, function (expandedBody) {">
											<outline text="callback (expandedBody); "/>
											<outline text="});"/>
											</outline>
										<outline text="}" created="Tue, 10 May 2022 21:46:01 GMT"/>
										</outline>
									<outline text="});" created="Wed, 11 May 2022 14:41:59 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function doLevel (head, path, levelcompletecallback) {">
								<outline text="function doOneSub (head, ixsub) {">
									<outline text="if ((head.subs !== undefined) &amp;&amp; (ixsub &lt; head.subs.length)) {">
										<outline text="var sub = head.subs [ixsub], subpath = path + getNameAtt (sub);"/>
										<outline text="if (!utils.getBoolean (sub.iscomment)) { ">
											<outline text="if (sub.type == &quot;include&quot;) {">
												<outline text="nodecallback (sub, subpath);"/>
												<outline text="readInclude (sub, function (theIncludedOutline) {">
													<outline text="if (theIncludedOutline !== undefined) {">
														<outline text="doLevel (theIncludedOutline, subpath + &quot;/&quot;, function () { ">
															<outline text="outlevelcallback ();"/>
															<outline text="doOneSub (head, ixsub +1);"/>
															<outline text="});"/>
															</outline>
														<outline text="}"/>
														</outline>
													<outline text="else { //6/25/15 by DW -- don't let errors derail us">
														<outline text="doOneSub (head, ixsub +1);"/>
														<outline text="}"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="nodecallback (sub, subpath);"/>
												<outline text="if (sub.subs !== undefined) {">
													<outline text="doLevel (sub, subpath + &quot;/&quot;, function () { ">
														<outline text="outlevelcallback ();"/>
														<outline text="doOneSub (head, ixsub +1);"/>
														<outline text="});"/>
														</outline>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="doOneSub (head, ixsub +1);"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="doOneSub (head, ixsub +1);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="levelcompletecallback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="inlevelcallback ();"/>
								<outline text="if (head.type == &quot;include&quot;) {">
									<outline text="readInclude (head, function (theIncludedOutline) {">
										<outline text="if (theIncludedOutline !== undefined) {">
											<outline text="doOneSub (theIncludedOutline, 0);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="doOneSub (head, 0);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="doLevel (theBody, &quot;&quot;, function () {">
								<outline text="outlevelcallback ();"/>
								<outline text="visitcompletecallback ();"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="bodyVisiter (theOutline, function () {">
							<outline text="callback (theNewBody);"/>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 11 May 2022 14:20:15 GMT"/>
						</outline>
					<outline text="expandBody (theOutline.opml.body, function (theNewBody) {" created="Wed, 11 May 2022 14:20:02 GMT">
						<outline text="var theNewOutline = {" created="Wed, 11 May 2022 14:26:29 GMT">
							<outline text="opml: {" created="Wed, 11 May 2022 14:26:38 GMT">
								<outline text="head: {" created="Wed, 11 May 2022 14:26:54 GMT">
									<outline text="}," created="Wed, 11 May 2022 14:37:03 GMT"/>
									</outline>
								<outline text="body: theNewBody" created="Wed, 11 May 2022 14:26:46 GMT"/>
								<outline text="}" created="Wed, 11 May 2022 14:26:42 GMT"/>
								</outline>
							<outline text="}" created="Wed, 11 May 2022 14:26:36 GMT"/>
							</outline>
						<outline text="utils.copyScalars (theOutline.opml.head, theNewOutline.opml.head);"/>
						<outline text="callback (theNewOutline);" created="Wed, 11 May 2022 14:25:44 GMT"/>
						<outline text="});" created="Wed, 11 May 2022 14:24:26 GMT"/>
						</outline>
					<outline text="}" created="Wed, 11 May 2022 14:20:00 GMT"/>
					</outline>
				<outline text="" created="Tue, 25 Oct 2022 16:30:15 GMT"/>
				<outline text="function readOutline (urlOpmlFile, callback) { //10/25/22; 12:30:31 PM by DW -- copied from Daytona" created="Wed, 24 Nov 2021 16:02:41 GMT">
					<outline text="httpRequest (urlOpmlFile, function (err, opmltext) {" created="Thu, 17 Jun 2021 19:56:51 GMT">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:12:18 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:14:05 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:14:10 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:12:29 GMT">
							<outline text="parse (opmltext, function (err, theOutline) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined, theOutline);" created="Mon, 09 Aug 2021 16:19:53 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:12:31 GMT"/>
							</outline>
						<outline text="})" created="Thu, 17 Jun 2021 19:58:33 GMT"/>
						</outline>
					<outline text="}" created="Wed, 24 Nov 2021 16:02:54 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Fri, 02 Jul 2021 21:15:05 GMT"/>
			<outline text="examples/markdown/package.json" created="Tue, 04 Jan 2022 16:40:44 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test reading and writing markdown/outline files.&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;main&quot;: &quot;test.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opml&quot;: &quot;*&quot;" created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/markdown/test.js" created="Tue, 04 Jan 2022 16:41:09 GMT">
				<outline text="1/4/22; 12:08:54 PM by DW" isComment="true" created="Sat, 03 Jul 2021 19:27:01 GMT"/>
				<outline text="" created="Tue, 04 Jan 2022 17:25:23 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const opml = require (&quot;opml&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="" created="Tue, 04 Jan 2022 17:18:51 GMT"/>
				<outline text="fs.readFile (&quot;states.md&quot;, function (err, mdtext) {" created="Wed, 30 Jun 2021 13:12:23 GMT">
					<outline text="if (err) {" created="Sat, 03 Jul 2021 14:56:50 GMT">
						<outline text="console.log (err.message);" created="Sat, 03 Jul 2021 14:56:52 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 14:57:02 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 03 Jul 2021 14:57:03 GMT">
						<outline text="var theOutline = opml.markdownToOutline (mdtext.toString ());" created="Tue, 04 Jan 2022 17:33:56 GMT"/>
						<outline text="fs.writeFile (&quot;newStates.opml&quot;, opml.stringify (theOutline), function (err) {" created="Tue, 04 Jan 2022 17:49:41 GMT">
							<outline text="if (err) {" created="Tue, 04 Jan 2022 17:34:24 GMT">
								<outline text="console.log (&quot;There was an error writing states.md: &quot; + err.message);" created="Tue, 04 Jan 2022 17:34:27 GMT"/>
								<outline text="}" created="Tue, 04 Jan 2022 17:34:47 GMT"/>
								</outline>
							<outline text="});" created="Tue, 04 Jan 2022 17:34:22 GMT"/>
							</outline>
						<outline text="fs.writeFile (&quot;newStates.md&quot;, opml.outlineToMarkdown (theOutline), function (err) {" created="Tue, 04 Jan 2022 17:49:41 GMT">
							<outline text="if (err) {" created="Tue, 04 Jan 2022 17:34:24 GMT">
								<outline text="console.log (&quot;There was an error writing states.md: &quot; + err.message);" created="Tue, 04 Jan 2022 17:34:27 GMT"/>
								<outline text="}" created="Tue, 04 Jan 2022 17:34:47 GMT"/>
								</outline>
							<outline text="});" created="Tue, 04 Jan 2022 17:34:22 GMT"/>
							</outline>
						<outline text="console.log (&quot;\nLook for newStates.md and newStates.opml in the same directory as test.js.\n&quot;);" created="Tue, 04 Jan 2022 17:29:44 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 14:57:05 GMT"/>
						</outline>
					<outline text="});" created="Wed, 30 Jun 2021 13:12:39 GMT"/>
					</outline>
				</outline>
			<outline text="examples/markdown/readme.md" created="Tue, 04 Jan 2022 18:07:35 GMT">
				<outline text="# Markdown/outline demo app" created="Tue, 04 Jan 2022 18:17:35 GMT">
					<outline text="This app illustrates the reading and writing of outlines from an extended version of Markdown that some outliners use to exchange user structures. " created="Tue, 04 Jan 2022 18:17:47 GMT"/>
					</outline>
				<outline text="### The name of the format" created="Tue, 04 Jan 2022 18:18:53 GMT">
					<outline text="This format doesn't appear to have a name, so we're using the name &lt;i&gt;markdown/outline&lt;/i&gt; in the docs and code. " created="Tue, 04 Jan 2022 18:19:03 GMT"/>
					</outline>
				<outline text="### What test.js does" created="Tue, 04 Jan 2022 18:19:14 GMT">
					<outline text="There's an example file, states.md, in the folder with the app. It was produced in LogSeq, an outliner that uses this format. " created="Tue, 04 Jan 2022 18:19:22 GMT"/>
					<outline text="The app reads the file, then converts it to a JavaScript oijbect called theOutline, by calling opml.markdownToOutline, a routine provided by the OPML package. " created="Tue, 04 Jan 2022 18:19:54 GMT"/>
					<outline text="Then it writes the structure to two files: newStates.md and newStates.opml, by calling two routines provided by the OPML package. There are no differences in the data stored in these files, the two formats are exactly equivalent. " created="Tue, 04 Jan 2022 18:06:47 GMT"/>
					</outline>
				<outline text="### Where to discuss" created="Tue, 04 Jan 2022 18:09:51 GMT">
					<outline text="A &lt;a href=&quot;https://github.com/scripting/drummerRFC/issues/4#issuecomment-1004429268&quot;&gt;thread&lt;/a&gt;  on the DrummerRFC site where this work is being discussed." created="Tue, 04 Jan 2022 18:09:54 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Tue, 04 Jan 2022 17:25:15 GMT"/>
			<outline text="examples/parsing/package.json" created="Wed, 30 Jun 2021 13:10:36 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test opml.parse and opml.stringify.&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.2&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;main&quot;: &quot;test.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opml&quot;: &quot;*&quot;" created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/parsing/test.js" created="Wed, 30 Jun 2021 13:10:36 GMT">
				<outline text="7/3/21; 3:27:01 PM by DW" isComment="true" created="Sat, 03 Jul 2021 19:27:01 GMT">
					<outline text="Read and write an OPML file from a file." created="Sat, 03 Jul 2021 19:27:51 GMT"/>
					<outline text="Also display:" created="Sat, 03 Jul 2021 15:29:57 GMT">
						<outline text="The outline's title from the head section and " created="Sat, 03 Jul 2021 15:34:45 GMT"/>
						<outline text="The text of the third child of the second top level subhead of the United States." created="Sat, 03 Jul 2021 15:34:54 GMT"/>
						<outline text="Illustrates how you get data from the compiled structure." created="Sat, 03 Jul 2021 15:31:45 GMT"/>
						<outline text="Once you've compiled the OPML, you process it as a JavaScript object." created="Sat, 03 Jul 2021 15:35:25 GMT"/>
						<outline text="When you're done, you can serialize it with opml.stringify. " created="Sat, 03 Jul 2021 15:35:47 GMT"/>
						<outline text="By design, works like JSON, so every JS programmer should find this familiar. " created="Sat, 03 Jul 2021 15:36:02 GMT"/>
						</outline>
					<outline text="Visit every node in the outline, and convert the text to upper case." created="Sat, 03 Jul 2021 19:31:33 GMT">
						<outline text="Display OPML text of the uppercased outline in the console." created="Sat, 03 Jul 2021 19:47:39 GMT"/>
						</outline>
					</outline>
				<outline text="" created="Sat, 03 Jul 2021 15:23:53 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const opml = require (&quot;opml&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="" created="Wed, 30 Jun 2021 13:12:19 GMT"/>
				<outline text="fs.readFile (&quot;states.opml&quot;, function (err, opmltext) {" created="Wed, 30 Jun 2021 13:12:23 GMT">
					<outline text="if (err) {" created="Sat, 03 Jul 2021 14:56:50 GMT">
						<outline text="console.log (err.message);" created="Sat, 03 Jul 2021 14:56:52 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 14:57:02 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 03 Jul 2021 14:57:03 GMT">
						<outline text="opml.parse (opmltext, function (err, theOutline) { //convert OPML text into a JavaScript structure" created="Wed, 30 Jun 2021 13:16:34 GMT">
							<outline text="console.log (&quot;\nThe outline's title is \&quot;&quot; + theOutline.opml.head.title + &quot;.\&quot;&quot;); //see comment at top" created="Sat, 03 Jul 2021 15:30:30 GMT"/>
							<outline text="console.log (&quot;The third state in the Great Plains is: \&quot;&quot; + theOutline.opml.body.subs [0].subs [1].subs [2].text + &quot;.\&quot;&quot;);" created="Sat, 03 Jul 2021 15:30:30 GMT"/>
							<outline text="fs.writeFile (&quot;states.json&quot;, JSON.stringify (theOutline, undefined, 4), function (err) {" created="Sat, 03 Jul 2021 15:24:06 GMT">
								<outline text="if (err) {" created="Sat, 03 Jul 2021 15:24:43 GMT">
									<outline text="console.log (err.message);" created="Sat, 03 Jul 2021 15:24:45 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 15:24:49 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 03 Jul 2021 15:40:08 GMT">
									<outline text="console.log (&quot;states.json was saved.&quot;);" created="Sat, 03 Jul 2021 15:40:15 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 15:40:30 GMT"/>
									</outline>
								<outline text="});" created="Sat, 03 Jul 2021 15:24:38 GMT"/>
								</outline>
							<outline text="fs.writeFile (&quot;statescopy.opml&quot;, opml.stringify (theOutline), function (err) {" created="Sat, 03 Jul 2021 15:24:06 GMT">
								<outline text="if (err) {" created="Sat, 03 Jul 2021 15:24:43 GMT">
									<outline text="console.log (err.message);" created="Sat, 03 Jul 2021 15:24:45 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 15:24:49 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 03 Jul 2021 15:40:08 GMT">
									<outline text="console.log (&quot;statescopy.opml was saved.&quot;);" created="Sat, 03 Jul 2021 15:40:15 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 15:40:30 GMT"/>
									</outline>
								<outline text="});" created="Sat, 03 Jul 2021 15:24:38 GMT"/>
								</outline>
							<outline text="opml.visitAll (theOutline, function (node) {" created="Sat, 03 Jul 2021 19:31:57 GMT">
								<outline text="node.text = node.text.toUpperCase ();" created="Sat, 03 Jul 2021 19:32:24 GMT"/>
								<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
								<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
								</outline>
							<outline text="console.log (opml.stringify (theOutline)); //view the uppercased outline in the JS console" created="Sat, 03 Jul 2021 19:38:29 GMT"/>
							<outline text="});" created="Wed, 30 Jun 2021 13:16:57 GMT"/>
							</outline>
						<outline text="}" created="Sat, 03 Jul 2021 14:57:05 GMT"/>
						</outline>
					<outline text="});" created="Wed, 30 Jun 2021 13:12:39 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Wed, 11 May 2022 20:58:54 GMT"/>
			<outline text="examples/includes/package.json" created="Wed, 11 May 2022 20:58:54 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test opml.expandIncludes.&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;main&quot;: &quot;test.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;opml&quot;: &quot;*&quot;" created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/includes/test.js" created="Wed, 30 Jun 2021 13:10:36 GMT">
				<outline text="5/11/22; 4:59:24 PM by DW" isComment="true" created="Sat, 03 Jul 2021 19:27:01 GMT">
					<outline text="Read an OPML file that has includes." created="Sat, 03 Jul 2021 19:27:51 GMT"/>
					<outline text="Pass it through opml.expandIncludes." created="Wed, 11 May 2022 20:59:42 GMT"/>
					<outline text="Display the resulting outline, with the includes expanded. " created="Wed, 11 May 2022 21:00:00 GMT"/>
					</outline>
				<outline text="" created="Sat, 03 Jul 2021 15:23:53 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const opml = require (&quot;opml&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="" created="Wed, 30 Jun 2021 13:12:19 GMT"/>
				<outline text="fs.readFile (&quot;includes.opml&quot;, function (err, opmltext) {" created="Wed, 30 Jun 2021 13:12:23 GMT">
					<outline text="if (err) {" created="Sat, 03 Jul 2021 14:56:50 GMT">
						<outline text="console.log (err.message);" created="Sat, 03 Jul 2021 14:56:52 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 14:57:02 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 03 Jul 2021 14:57:03 GMT">
						<outline text="opml.parse (opmltext, function (err, theOutline) { //convert OPML text into a JavaScript structure" created="Wed, 30 Jun 2021 13:16:34 GMT">
							<outline text="opml.expandIncludes (theOutline, function (theNewOutline) {" created="Wed, 11 May 2022 21:00:45 GMT">
								<outline text="console.log (JSON.stringify (theNewOutline, undefined, 4));" created="Wed, 11 May 2022 21:01:15 GMT"/>
								<outline text="});" created="Wed, 11 May 2022 21:01:00 GMT"/>
								</outline>
							<outline text="});" created="Wed, 30 Jun 2021 13:16:57 GMT"/>
							</outline>
						<outline text="}" created="Sat, 03 Jul 2021 14:57:05 GMT"/>
						</outline>
					<outline text="});" created="Wed, 30 Jun 2021 13:12:39 GMT"/>
					</outline>
				</outline>
			<outline text="examples/includes/includes.opml">
				<outline text="Colors" created="Wed, 11 May 2022 21:02:19 GMT" name="colors" type="include" url="http://scripting.com/publicfolder/misc/inclusionDemo/colors.opml"/>
				<outline text="Kids names" created="Wed, 11 May 2022 21:03:38 GMT" name="kidsNames" type="include" url="http://scripting.com/publicfolder/misc/inclusionDemo/names.opml"/>
				<outline text="Veggies" created="Wed, 11 May 2022 21:03:42 GMT" type="include" url="http://scripting.com/publicfolder/misc/inclusionDemo/veggies.opml"/>
				</outline>
			<outline text="" created="Fri, 02 Jul 2021 15:25:02 GMT"/>
			<outline text="client/opml.js" created="Fri, 02 Jul 2021 15:25:02 GMT">
				<outline text="const opml = {" created="Sat, 03 Jul 2021 19:19:58 GMT">
					<outline text="parse: opmlParse," created="Sat, 03 Jul 2021 19:20:11 GMT"/>
					<outline text="stringify: opmlStringify," created="Sat, 03 Jul 2021 19:20:14 GMT"/>
					<outline text="htmlify: getOutlineHtml," created="Sat, 03 Jul 2021 19:20:56 GMT"/>
					<outline text="read: readOutline, //9/24/21 by DW" created="Fri, 24 Sep 2021 17:50:49 GMT"/>
					<outline text="visitAll: visitAll," created="Sat, 03 Jul 2021 19:33:05 GMT"/>
					<outline text="markdownToOutline, //1/3/22 by DW" created="Mon, 03 Jan 2022 22:57:24 GMT"/>
					<outline text="outlineToMarkdown //1/3/22 by DW" created="Mon, 03 Jan 2022 22:57:28 GMT"/>
					<outline text="};" created="Sat, 03 Jul 2021 19:20:04 GMT"/>
					</outline>
				<outline text="" created="Sat, 03 Jul 2021 19:19:58 GMT"/>
				<outline text="function filledString (ch, ct) { //6/4/14 by DW">
					<outline text="var s = &quot;&quot;;"/>
					<outline text="for (var i = 0; i &lt; ct; i++) {">
						<outline text="s += ch;"/>
						<outline text="}"/>
						</outline>
					<outline text="return (s);"/>
					<outline text="}"/>
					</outline>
				<outline text="function encodeXml (s) { //7/15/14 by DW">
					<outline text="Changes" isComment="true">
						<outline text="12/14/15; 4:28:14 PM by DW">
							<outline text="Check for undefined, return empty string."/>
							</outline>
						</outline>
					<outline text="if (s === undefined) {">
						<outline text="return (&quot;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="var charMap = {" collapse="true">
							<outline text="'&lt;': '&amp;lt;',"/>
							<outline text="'&gt;': '&amp;gt;',"/>
							<outline text="'&amp;': '&amp;amp;',"/>
							<outline text="'&quot;': '&amp;'+'quot;'"/>
							<outline text="};"/>
							</outline>
						<outline text="s = s.toString();" created="Sat, 13 Apr 2013 20:25:04 GMT" pgfnum="1662"/>
						<outline text="s = s.replace(/\u00A0/g, &quot; &quot;);" created="Fri, 12 Apr 2013 21:27:40 GMT" pgfnum="1632"/>
						<outline text="var escaped = s.replace(/[&lt;&gt;&amp;&quot;]/g, function(ch) {" collapse="true">
							<outline text="return charMap [ch];"/>
							<outline text="});"/>
							</outline>
						<outline text="return escaped;" created="Thu, 07 Feb 2013 04:53:23 GMT" pgfnum="129"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function xmlCompile (xmltext) { //3/27/17 by DW">
					<outline text="return ($($.parseXML (xmltext)));"/>
					<outline text="}"/>
					</outline>
				<outline text="function xmlGatherAttributes (adrx, theTable) {" created="Tue, 05 Nov 2013 16:59:40 GMT" pgfnum="30862">
					<outline text="if (adrx.attributes != undefined) {" created="Tue, 05 Nov 2013 15:02:55 GMT" pgfnum="30828">
						<outline text="for (var i = 0; i &lt; adrx.attributes.length; i++) {">
							<outline text="var att = adrx.attributes [i];"/>
							<outline text="if (att.specified) {">
								<outline text="theTable [att.name] = att.value;" created="Tue, 05 Nov 2013 14:45:42 GMT" pgfnum="30820"/>
								<outline text="}" created="Tue, 05 Nov 2013 14:47:36 GMT" pgfnum="30822"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Tue, 05 Nov 2013 15:03:05 GMT" pgfnum="30829"/>
						</outline>
					<outline text="}" created="Tue, 05 Nov 2013 16:59:47 GMT" pgfnum="30864"/>
					</outline>
				<outline text="function xmlGetAttribute (adrx, name) {" created="Thu, 31 Oct 2013 17:06:52 GMT" pgfnum="30697">
					<outline text="return ($(adrx).attr (name));" created="Thu, 31 Oct 2013 17:07:16 GMT" pgfnum="30699"/>
					<outline text="}" created="Thu, 31 Oct 2013 17:07:04 GMT" pgfnum="30698"/>
					</outline>
				<outline text="function xmlGetAddress (adrx, name) {" created="Wed, 30 Oct 2013 17:20:32 GMT" pgfnum="30666">
					<outline text="return (adrx.find (name));" created="Wed, 30 Oct 2013 17:53:45 GMT" pgfnum="30676"/>
					<outline text="}" created="Wed, 30 Oct 2013 17:52:35 GMT" pgfnum="30675"/>
					</outline>
				<outline text="function xmlGetSubValues (adrx) { //10/12/16 by DW">
					<outline text="Changes" isComment="true">
						<outline text="10/12/16; 11:25:15 AM by DW">
							<outline text="Return a JS object with the values of all the sub-elements of adrx."/>
							</outline>
						</outline>
					<outline text="var values = new Object ();"/>
					<outline text="$(adrx).children ().each (function () {">
						<outline text="var name = xmlGetNodeNameProp (this);"/>
						<outline text="if (name.length &gt; 0) {" created="Tue, 24 Dec 2013 17:28:15 GMT" pgfnum="34343">
							<outline text="var val = $(this).prop (&quot;textContent&quot;);" created="Tue, 24 Dec 2013 17:42:30 GMT" pgfnum="34352"/>
							<outline text="name = &quot;opml&quot; + string.upper (name [0]) + string.mid (name, 2, name.length - 1);" isComment="true" created="Tue, 24 Dec 2013 17:28:30 GMT" pgfnum="34349"/>
							<outline text="values [name] = val;" created="Tue, 24 Dec 2013 17:42:52 GMT" pgfnum="34353"/>
							<outline text="}" created="Tue, 24 Dec 2013 17:28:27 GMT" pgfnum="34348"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="return (values);"/>
					<outline text="}"/>
					</outline>
				<outline text="function xmlGetNodeNameProp (adrx) { //12/10/13 by DW" created="Tue, 10 Dec 2013 15:50:23 GMT" pgfnum="33370">
					<outline text="return ($(adrx).prop (&quot;nodeName&quot;));" created="Tue, 10 Dec 2013 15:50:43 GMT" pgfnum="33372"/>
					<outline text="}" created="Tue, 10 Dec 2013 15:50:31 GMT" pgfnum="33371"/>
					</outline>
				<outline text="function xmlHasSubs (adrx) {" created="Thu, 06 Jun 2013 21:06:25 GMT" pgfnum="3862">
					<outline text="return ($(adrx).children ().length &gt; 0); //use jQuery to get answer -- 12/30/13 by DW" created="Mon, 30 Dec 2013 14:07:10 GMT" pgfnum="34893"/>
					<outline text="};" created="Thu, 06 Jun 2013 21:06:38 GMT" pgfnum="3864"/>
					</outline>
				<outline text="" created="Tue, 04 Jan 2022 22:49:44 GMT"/>
				<outline text="function outlineToJson (adrx, nameOutlineElement) { //12/25/20 by DW">
					<outline text="Changes" isComment="true">
						<outline text="10/20/14; 5:54:44 PM by DW">
							<outline text="Convert a &lt;source:outline&gt; structure from an RSS item into a jstruct."/>
							</outline>
						</outline>
					<outline text="var theOutline = new Object ();"/>
					<outline text="if (nameOutlineElement === undefined) {">
						<outline text="nameOutlineElement = &quot;outline&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="xmlGatherAttributes (adrx, theOutline);"/>
					<outline text="if (xmlHasSubs (adrx)) {">
						<outline text="theOutline.subs = [];"/>
						<outline text="$(adrx).children (nameOutlineElement).each (function () {">
							<outline text="theOutline.subs [theOutline.subs.length] = outlineToJson (this, nameOutlineElement);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (theOutline);"/>
					<outline text="}"/>
					</outline>
				<outline text="function markdownToOutline (mdtext, options) {  //1/3/22 by DW" created="Mon, 03 Jan 2022 22:48:19 GMT">
					<outline text="Changes" isComment="true" created="Mon, 03 Jan 2022 22:50:33 GMT">
						<outline text="1/12/22; 5:17:25 PM by DW" created="Wed, 12 Jan 2022 22:17:24 GMT">
							<outline text="New optional param, options. " created="Wed, 12 Jan 2022 22:17:25 GMT"/>
							<outline text="options.flAddUnderscores, defaults true. " created="Wed, 12 Jan 2022 22:17:36 GMT"/>
							</outline>
						<outline text="1/8/22; 10:54:14 AM by DW" created="Sat, 08 Jan 2022 15:54:14 GMT">
							<outline text="Any atts that show up at the beginning of a file are ignored. Previously they would cause the process to crash." created="Sat, 08 Jan 2022 15:54:14 GMT"/>
							</outline>
						<outline text="1/3/22; 5:50:36 PM by DW" created="Mon, 03 Jan 2022 22:50:34 GMT">
							<outline text="Turn a markdown file as created by LogSeq or a compatible product " created="Mon, 03 Jan 2022 22:50:36 GMT"/>
							<outline text="into an outline structure compatible with the one that is created from " created="Mon, 03 Jan 2022 23:02:44 GMT"/>
							<outline text="parsing OPML text." created="Mon, 03 Jan 2022 23:02:49 GMT"/>
							</outline>
						</outline>
					<outline text="var theOutline = {" created="Thu, 30 Dec 2021 16:10:59 GMT">
						<outline text="opml: {" created="Thu, 30 Dec 2021 16:11:11 GMT">
							<outline text="head: {" created="Thu, 30 Dec 2021 16:11:15 GMT">
								<outline text="}," created="Thu, 30 Dec 2021 16:11:19 GMT"/>
								</outline>
							<outline text="body: {" created="Thu, 30 Dec 2021 16:11:20 GMT">
								<outline text="subs: new Array ()" created="Thu, 30 Dec 2021 16:11:25 GMT"/>
								<outline text="}" created="Thu, 30 Dec 2021 16:11:34 GMT"/>
								</outline>
							<outline text="}" created="Thu, 30 Dec 2021 16:11:14 GMT"/>
							</outline>
						<outline text="};" created="Thu, 30 Dec 2021 16:11:06 GMT"/>
						</outline>
					<outline text="" created="Wed, 12 Jan 2022 22:18:09 GMT"/>
					<outline text="if (options === undefined) { //1/12/22 by DW" created="Wed, 12 Jan 2022 22:18:09 GMT">
						<outline text="options = new Object ();" created="Wed, 12 Jan 2022 22:18:19 GMT"/>
						<outline text="}" created="Wed, 12 Jan 2022 22:18:24 GMT"/>
						</outline>
					<outline text="if (options.flAddUnderscores === undefined) {" created="Wed, 12 Jan 2022 22:18:09 GMT">
						<outline text="options.flAddUnderscores = true;" created="Wed, 12 Jan 2022 22:18:44 GMT"/>
						<outline text="}" created="Wed, 12 Jan 2022 22:18:47 GMT"/>
						</outline>
					<outline text="" created="Wed, 12 Jan 2022 22:18:10 GMT"/>
					<outline text="mdtext = mdtext.toString ();" created="Tue, 04 Jan 2022 18:03:01 GMT"/>
					<outline text="var lines = mdtext.split (&quot;\n&quot;), lastlevel = 0, lastnode = undefined, currentsubs = theOutline.opml.body.subs, stack = new Array ();" created="Tue, 16 Nov 2021 16:37:39 GMT"/>
					<outline text="lines.forEach (function (theLine) {" created="Thu, 30 Dec 2021 15:58:06 GMT">
						<outline text="var thislevel = 0, flInsert = true;" created="Thu, 30 Dec 2021 16:06:17 GMT"/>
						<outline text="while (theLine.length &gt; 0) {" created="Thu, 30 Dec 2021 15:58:29 GMT">
							<outline text="if (theLine [0] != &quot;\t&quot;) {" created="Thu, 30 Dec 2021 16:08:12 GMT">
								<outline text="break;" created="Thu, 30 Dec 2021 16:08:26 GMT"/>
								<outline text="}" created="Thu, 30 Dec 2021 16:08:28 GMT"/>
								</outline>
							<outline text="thislevel++;" created="Thu, 30 Dec 2021 16:05:15 GMT"/>
							<outline text="theLine = stringDelete (theLine, 1, 1);" created="Thu, 30 Dec 2021 16:05:24 GMT"/>
							<outline text="}" created="Thu, 30 Dec 2021 16:04:27 GMT"/>
							</outline>
						<outline text="if (beginsWith (theLine, &quot;- &quot;)) {" created="Thu, 30 Dec 2021 16:09:06 GMT">
							<outline text="theLine = stringDelete (theLine, 1, 2);" created="Thu, 30 Dec 2021 16:09:51 GMT"/>
							<outline text="}" created="Thu, 30 Dec 2021 16:09:23 GMT"/>
							</outline>
						<outline text="else { //is the line an attribute?" created="Fri, 31 Dec 2021 16:44:17 GMT">
							<outline text="if (stringContains (theLine, &quot;:: &quot;)) {" created="Fri, 31 Dec 2021 16:44:29 GMT">
								<outline text="let parts = theLine.split (&quot;:: &quot;);" created="Fri, 31 Dec 2021 16:45:34 GMT"/>
								<outline text="if (lastnode !== undefined) { //1/8/22 by DW" created="Fri, 07 Jan 2022 18:40:55 GMT">
									<outline text="var name = (options.flAddUnderscores) ? &quot;_&quot; + parts [0] : parts [0]; //1/12/22 by DW" created="Wed, 12 Jan 2022 22:18:59 GMT"/>
									<outline text="lastnode [name] = parts [1];" created="Fri, 31 Dec 2021 16:47:34 GMT"/>
									<outline text="lastnode [&quot;_&quot; + parts [0]] = parts [1];" isComment="true" created="Fri, 31 Dec 2021 16:47:34 GMT"/>
									<outline text="}" created="Fri, 07 Jan 2022 18:41:06 GMT"/>
									</outline>
								<outline text="flInsert = false;" created="Fri, 31 Dec 2021 17:33:29 GMT"/>
								<outline text="}" created="Fri, 31 Dec 2021 16:45:27 GMT"/>
								</outline>
							<outline text="}" created="Fri, 31 Dec 2021 16:44:20 GMT"/>
							</outline>
						<outline text="if (thislevel &gt; lastlevel) {" created="Thu, 30 Dec 2021 16:12:26 GMT">
							<outline text="stack.push (currentsubs);" created="Thu, 30 Dec 2021 16:14:31 GMT"/>
							<outline text="lastnode.subs = new Array ();" created="Thu, 30 Dec 2021 16:18:53 GMT"/>
							<outline text="currentsubs = lastnode.subs;" created="Thu, 30 Dec 2021 16:19:22 GMT"/>
							<outline text="}" created="Thu, 30 Dec 2021 16:12:36 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 30 Dec 2021 16:12:37 GMT">
							<outline text="if (thislevel &lt; lastlevel) {" created="Thu, 30 Dec 2021 16:12:39 GMT">
								<outline text="var ctpops = lastlevel - thislevel;" created="Thu, 30 Dec 2021 16:21:00 GMT"/>
								<outline text="for (var i = 1; i &lt;= ctpops; i++) {" created="Thu, 30 Dec 2021 16:21:20 GMT">
									<outline text="currentsubs = stack.pop ();" created="Thu, 30 Dec 2021 16:21:41 GMT"/>
									<outline text="}" created="Thu, 30 Dec 2021 16:21:36 GMT"/>
									</outline>
								<outline text="}" created="Thu, 30 Dec 2021 16:12:51 GMT"/>
								</outline>
							<outline text="}" created="Thu, 30 Dec 2021 16:12:52 GMT"/>
							</outline>
						<outline text="" created="Fri, 31 Dec 2021 17:32:08 GMT"/>
						<outline text="if (flInsert) {" created="Fri, 31 Dec 2021 17:36:21 GMT">
							<outline text="var newnode = {" created="Thu, 30 Dec 2021 16:16:31 GMT">
								<outline text="text: theLine" created="Fri, 31 Dec 2021 17:34:19 GMT"/>
								<outline text="}" created="Fri, 31 Dec 2021 17:34:27 GMT"/>
								</outline>
							<outline text="currentsubs.push (newnode);" created="Thu, 30 Dec 2021 16:16:31 GMT"/>
							<outline text="lastnode = newnode;" created="Thu, 30 Dec 2021 16:18:09 GMT"/>
							<outline text="lastlevel = thislevel;" created="Thu, 30 Dec 2021 16:12:26 GMT"/>
							<outline text="}" created="Fri, 31 Dec 2021 17:36:23 GMT"/>
							</outline>
						<outline text="});" created="Thu, 30 Dec 2021 15:58:14 GMT"/>
						</outline>
					<outline text="return (theOutline);" created="Mon, 03 Jan 2022 22:50:27 GMT"/>
					<outline text="}" created="Mon, 03 Jan 2022 22:49:00 GMT"/>
					</outline>
				<outline text="function outlineToMarkdown (theOutline) {  //1/3/22 by DW" created="Thu, 30 Dec 2021 19:58:44 GMT">
					<outline text="Changes" isComment="true" created="Mon, 03 Jan 2022 23:02:56 GMT">
						<outline text="1/3/22; 6:03:00 PM by DW" created="Mon, 03 Jan 2022 23:02:58 GMT">
							<outline text="Generate markdown text from the indicated outline structure " created="Mon, 03 Jan 2022 23:03:00 GMT"/>
							<outline text="that can be read by LogSeq and compatible apps. " created="Mon, 03 Jan 2022 23:03:40 GMT"/>
							</outline>
						</outline>
					<outline text="var mdtext = &quot;&quot;, indentlevel = 0;"/>
					<outline text="function add (s) {">
						<outline text="mdtext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Mon, 27 Dec 2021 17:31:10 GMT"/>
						<outline text="}" created="Mon, 27 Dec 2021 17:31:43 GMT"/>
						</outline>
					<outline text="function addAtts (atts) {" created="Sat, 13 Nov 2021 15:56:13 GMT">
						<outline text="for (var x in atts) {" created="Sat, 13 Nov 2021 15:56:25 GMT">
							<outline text="if ((x != &quot;subs&quot;) &amp;&amp; (x != &quot;text&quot;)) {" created="Sat, 13 Nov 2021 15:56:34 GMT">
								<outline text="if (beginsWith (x, &quot;_&quot;)) {" created="Fri, 31 Dec 2021 17:20:16 GMT">
									<outline text="add (stringDelete (x, 1, 1) + &quot;:: &quot; + atts [x]);" created="Sat, 13 Nov 2021 15:56:47 GMT"/>
									<outline text="}" created="Fri, 31 Dec 2021 17:20:28 GMT"/>
									</outline>
								<outline text="}" created="Sat, 13 Nov 2021 15:56:44 GMT"/>
								</outline>
							<outline text="}" created="Sat, 13 Nov 2021 15:56:33 GMT"/>
							</outline>
						<outline text="}" created="Sat, 13 Nov 2021 15:56:22 GMT"/>
						</outline>
					<outline text="function dolevel (theNode) {">
						<outline text="theNode.subs.forEach (function (sub) {" created="Mon, 27 Dec 2021 17:36:00 GMT">
							<outline text="add (&quot;- &quot; + sub.text);"/>
							<outline text="addAtts (sub);" created="Fri, 31 Dec 2021 16:29:32 GMT"/>
							<outline text="if (sub.subs !== undefined) {" created="Fri, 31 Dec 2021 15:43:08 GMT">
								<outline text="indentlevel++;"/>
								<outline text="dolevel (sub);"/>
								<outline text="indentlevel--;"/>
								<outline text="}" created="Fri, 31 Dec 2021 15:43:15 GMT"/>
								</outline>
							<outline text="});" created="Mon, 27 Dec 2021 17:36:29 GMT"/>
							</outline>
						<outline text="}" created="Mon, 27 Dec 2021 17:34:14 GMT"/>
						</outline>
					<outline text="addAtts (theOutline.opml.head);" isComment="true" created="Fri, 31 Dec 2021 16:29:32 GMT"/>
					<outline text="dolevel (theOutline.opml.body)"/>
					<outline text="return (mdtext);" created="Fri, 31 Dec 2021 15:39:22 GMT"/>
					<outline text="}" created="Thu, 30 Dec 2021 19:58:56 GMT"/>
					</outline>
				<outline text="" created="Sat, 03 Jul 2021 20:46:21 GMT"/>
				<outline text="function opmlParse (opmltext) {" created="Fri, 11 Jun 2021 11:58:09 GMT">
					<outline text="Changes" isComment="true" created="Sun, 13 Jun 2021 13:49:43 GMT">
						<outline text="12/16/21; 11:43:21 AM by DW" created="Thu, 16 Dec 2021 16:43:21 GMT">
							<outline text="If opmltext is not valid XML, display a message in the console." created="Thu, 16 Dec 2021 16:43:22 GMT"/>
							</outline>
						<outline text="6/13/21; 9:49:51 AM by DW" created="Sun, 13 Jun 2021 13:49:47 GMT">
							<outline text="Generate a JavaScript object from OPML text. " created="Sun, 13 Jun 2021 13:49:52 GMT"/>
							</outline>
						</outline>
					<outline text="var xstruct;" created="Thu, 16 Dec 2021 16:40:34 GMT"/>
					<outline text="try {" created="Thu, 16 Dec 2021 16:40:56 GMT">
						<outline text="xstruct = xmlCompile (opmltext);"/>
						<outline text="}" created="Thu, 16 Dec 2021 16:40:58 GMT"/>
						</outline>
					<outline text="catch (err) {" created="Thu, 16 Dec 2021 16:40:58 GMT">
						<outline text="console.log (&quot;opmlParse: invalid XML.&quot;);" created="Thu, 16 Dec 2021 16:41:13 GMT"/>
						<outline text="throw err;" created="Thu, 16 Dec 2021 16:42:38 GMT"/>
						<outline text="}" created="Thu, 16 Dec 2021 16:41:02 GMT"/>
						</outline>
					<outline text="" created="Thu, 16 Dec 2021 16:40:34 GMT"/>
					<outline text="var adrhead = xmlGetAddress (xstruct, &quot;head&quot;);" created="Thu, 10 Jun 2021 21:07:11 GMT"/>
					<outline text="var adrbody = xmlGetAddress (xstruct, &quot;body&quot;);" created="Fri, 11 Jun 2021 11:59:08 GMT"/>
					<outline text="var theObject = {" created="Fri, 11 Jun 2021 11:59:08 GMT">
						<outline text="opml: {" created="Fri, 11 Jun 2021 11:59:16 GMT">
							<outline text="head: xmlGetSubValues (adrhead)," created="Fri, 11 Jun 2021 11:59:20 GMT"/>
							<outline text="body: outlineToJson (adrbody)" created="Fri, 11 Jun 2021 11:59:37 GMT"/>
							<outline text="}" created="Fri, 11 Jun 2021 12:00:39 GMT"/>
							</outline>
						<outline text="}" created="Fri, 11 Jun 2021 12:00:40 GMT"/>
						</outline>
					<outline text="return (theObject);" created="Fri, 11 Jun 2021 11:59:08 GMT"/>
					<outline text="}" created="Fri, 11 Jun 2021 11:58:19 GMT"/>
					</outline>
				<outline text="function opmlStringify (theOutline) { //returns the opmltext for the outline -- 8/6/17 by DW">
					<outline text="var opmltext = &quot;&quot;, indentlevel = 0;"/>
					<outline text="function add (s) {">
						<outline text="opmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
						<outline text="}"/>
						</outline>
					<outline text="function addSubs (subs) {">
						<outline text="if (subs !== undefined) {">
							<outline text="for (var i = 0; i &lt; subs.length; i++) {">
								<outline text="let sub = subs [i], atts = &quot;&quot;;"/>
								<outline text="for (var x in sub) {" created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186">
									<outline text="if (x != &quot;subs&quot;) {">
										<outline text="atts += &quot; &quot; + x + &quot;=\&quot;&quot; + encodeXml (sub [x]) + &quot;\&quot;&quot;;" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
										<outline text="}"/>
										</outline>
									<outline text="}" created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187"/>
									</outline>
								<outline text="if (sub.subs === undefined) {">
									<outline text="add (&quot;&lt;outline&quot; + atts + &quot; /&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="add (&quot;&lt;outline&quot; + atts + &quot; &gt;&quot;); indentlevel++;"/>
									<outline text="addSubs (sub.subs);"/>
									<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;ISO-8859-1\&quot;?&gt;&quot;);"/>
					<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="//do head section">
						<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"/>
						<outline text="for (var x in theOutline.opml.head) {">
							<outline text="add (&quot;&lt;&quot; + x + &quot;&gt;&quot; + theOutline.opml.head [x] + &quot;&lt;/&quot; + x + &quot;&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"/>
						</outline>
					<outline text="//do body section">
						<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"/>
						<outline text="addSubs (theOutline.opml.body.subs);"/>
						<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"/>
						</outline>
					<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"/>
					<outline text="console.log (&quot;opmlify: opmltext == \n&quot; + opmltext);" isComment="true"/>
					<outline text="return (opmltext);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getOutlineHtml (theOutline) {" created="Thu, 10 Jun 2021 16:51:40 GMT">
					<outline text="var htmltext = &quot;&quot;, indentlevel = 0; //5/24/24 by DW" created="Thu, 10 Jun 2021 18:52:52 GMT"/>
					<outline text="function add (s) {" created="Thu, 10 Jun 2021 18:53:04 GMT">
						<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Thu, 10 Jun 2021 18:57:55 GMT"/>
						<outline text="}" created="Thu, 10 Jun 2021 18:57:50 GMT"/>
						</outline>
					<outline text="function addSubsHtml (node) {" created="Thu, 10 Jun 2021 18:52:07 GMT">
						<outline text="add (&quot;&lt;ul&gt;&quot;); indentlevel++;" created="Thu, 10 Jun 2021 18:54:17 GMT"/>
						<outline text="node.subs.forEach (function (sub) {" created="Thu, 10 Jun 2021 18:54:17 GMT">
							<outline text="add (&quot;&lt;li&gt;&quot; + sub.text + &quot;&lt;/li&gt;&quot;);" created="Thu, 10 Jun 2021 18:54:46 GMT"/>
							<outline text="if (sub.subs !== undefined) {" created="Thu, 10 Jun 2021 18:55:12 GMT">
								<outline text="addSubsHtml (sub);" created="Thu, 10 Jun 2021 18:55:37 GMT"/>
								<outline text="}" created="Thu, 10 Jun 2021 18:55:21 GMT"/>
								</outline>
							<outline text="});" created="Thu, 10 Jun 2021 18:54:26 GMT"/>
							</outline>
						<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;" created="Thu, 10 Jun 2021 18:54:17 GMT"/>
						<outline text="}" created="Thu, 10 Jun 2021 18:52:23 GMT"/>
						</outline>
					<outline text="addSubsHtml (theOutline.opml.body);"/>
					<outline text="return (htmltext);" created="Thu, 10 Jun 2021 16:58:17 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 16:51:51 GMT"/>
					</outline>
				<outline text="function visitAll (theOutline, callback) {" created="Sat, 03 Jul 2021 19:33:13 GMT">
					<outline text="function visitSubs (theNode) {" created="Sat, 03 Jul 2021 19:33:25 GMT">
						<outline text="if (theNode.subs !== undefined) {" created="Sat, 03 Jul 2021 19:34:31 GMT">
							<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {" created="Sat, 03 Jul 2021 19:34:44 GMT">
								<outline text="var theSub = theNode.subs [i];" created="Sat, 03 Jul 2021 19:36:34 GMT"/>
								<outline text="if (!callback (theSub)) {" created="Sat, 03 Jul 2021 19:35:39 GMT">
									<outline text="return (false);" created="Sat, 03 Jul 2021 19:35:50 GMT"/>
									<outline text="}" created="Sat, 03 Jul 2021 19:35:53 GMT"/>
									</outline>
								<outline text="visitSubs (theSub);" created="Sat, 03 Jul 2021 19:35:59 GMT"/>
								<outline text="}" created="Sat, 03 Jul 2021 19:35:15 GMT"/>
								</outline>
							<outline text="}" created="Sat, 03 Jul 2021 19:34:39 GMT"/>
							</outline>
						<outline text="return (true);" created="Sat, 03 Jul 2021 19:35:50 GMT"/>
						<outline text="}" created="Sat, 03 Jul 2021 19:34:19 GMT"/>
						</outline>
					<outline text="visitSubs (theOutline.opml.body);" created="Sat, 03 Jul 2021 19:33:26 GMT"/>
					<outline text="}" created="Sat, 03 Jul 2021 19:33:20 GMT"/>
					</outline>
				<outline text="" created="Tue, 04 Jan 2022 22:47:45 GMT"/>
				<outline text="function readOutline (urlOpmlFile, options, callback) { //9/24/21 by DW" created="Fri, 24 Sep 2021 17:51:13 GMT">
					<outline text="Changes" isComment="true" created="Fri, 24 Sep 2021 17:51:47 GMT">
						<outline text="9/27/21; 1:57:08 PM by DW" created="Mon, 27 Sep 2021 17:57:08 GMT">
							<outline text="If options is not defined, initialize it to a default object." created="Mon, 27 Sep 2021 17:57:09 GMT"/>
							</outline>
						<outline text="9/24/21; 1:51:52 PM by DW" created="Fri, 24 Sep 2021 17:51:50 GMT">
							<outline text="Read the outline over HTTP. If options.flSubscribe is present and true, we set up a websockets connection if the outline supports it, and calll back when it updates." created="Fri, 24 Sep 2021 17:51:53 GMT"/>
							</outline>
						</outline>
					<outline text="var mySocket = undefined, urlSocketServer;" created="Fri, 24 Sep 2021 18:10:34 GMT"/>
					<outline text="function beginsWith (s, possibleBeginning, flUnicase) { " created="Wed, 27 Nov 2013 21:58:15 GMT" pgfnum="32470">
						<outline text="if (s === undefined) { //7/15/15 by DW">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (s.length == 0) { //1/1/14 by DW" created="Wed, 01 Jan 2014 23:29:44 GMT" pgfnum="35184">
							<outline text="return (false);" created="Wed, 01 Jan 2014 23:29:49 GMT" pgfnum="35185"/>
							<outline text="}" created="Wed, 01 Jan 2014 23:29:52 GMT" pgfnum="35186"/>
							</outline>
						<outline text="if (flUnicase === undefined) {" created="Wed, 27 Nov 2013 21:59:59 GMT" pgfnum="32482">
							<outline text="flUnicase = true;" created="Wed, 27 Nov 2013 22:00:10 GMT" pgfnum="32483"/>
							<outline text="}" created="Wed, 27 Nov 2013 22:00:14 GMT" pgfnum="32484"/>
							</outline>
						<outline text="if (flUnicase) {" created="Wed, 27 Nov 2013 22:00:49 GMT" pgfnum="32485">
							<outline text="for (var i = 0; i &lt; possibleBeginning.length; i++) {" created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476">
								<outline text="if (stringLower (s [i]) != stringLower (possibleBeginning [i])) {" created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478">
									<outline text="return (false);" created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479"/>
									<outline text="}" created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480"/>
									</outline>
								<outline text="}" created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477"/>
								</outline>
							<outline text="}" created="Wed, 27 Nov 2013 22:00:58 GMT" pgfnum="32486"/>
							</outline>
						<outline text="else {" created="Wed, 27 Nov 2013 22:01:08 GMT" pgfnum="32487">
							<outline text="for (var i = 0; i &lt; possibleBeginning.length; i++) {" created="Wed, 27 Nov 2013 21:58:48 GMT" pgfnum="32476">
								<outline text="if (s [i] != possibleBeginning [i]) {" created="Wed, 27 Nov 2013 21:59:05 GMT" pgfnum="32478">
									<outline text="return (false);" created="Wed, 27 Nov 2013 21:59:34 GMT" pgfnum="32479"/>
									<outline text="}" created="Wed, 27 Nov 2013 21:59:38 GMT" pgfnum="32480"/>
									</outline>
								<outline text="}" created="Wed, 27 Nov 2013 21:59:01 GMT" pgfnum="32477"/>
								</outline>
							<outline text="}" created="Wed, 27 Nov 2013 22:01:15 GMT" pgfnum="32488"/>
							</outline>
						<outline text="return (true);" created="Wed, 27 Nov 2013 21:59:44 GMT" pgfnum="32481"/>
						<outline text="}" created="Wed, 27 Nov 2013 21:58:43 GMT" pgfnum="32475"/>
						</outline>
					<outline text="function readHttpFile (url, timeoutInMilliseconds, headers, callback) { ">
						<outline text="if (timeoutInMilliseconds === undefined) { ">
							<outline text="timeoutInMilliseconds = 5000;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (headers === undefined) {">
							<outline text="headers = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="var jxhr = $.ajax ({ ">
							<outline text="url: url,"/>
							<outline text="dataType: &quot;text&quot;, "/>
							<outline text="headers: headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout: timeoutInMilliseconds "/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="callback (status);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function wsWatchForChange () { //connect with socket server, if not already connected">
						<outline text="if (mySocket === undefined) {">
							<outline text="mySocket = new WebSocket (urlSocketServer); "/>
							<outline text="mySocket.onopen = function (evt) {">
								<outline text="var msg = &quot;watch &quot; + urlOpmlFile;"/>
								<outline text="mySocket.send (msg);"/>
								<outline text="console.log (&quot;wsWatchForChange: socket is open. sent msg == &quot; + msg);" created="Thu, 10 Jun 2021 12:56:13 GMT"/>
								<outline text="};"/>
								</outline>
							<outline text="mySocket.onmessage = function (evt) {">
								<outline text="var s = evt.data;"/>
								<outline text="if (s !== undefined) { //no error">
									<outline text="const updatekey = &quot;update\r&quot;;"/>
									<outline text="if (beginsWith (s, updatekey)) { //it's an update">
										<outline text="var opmltext = stringDelete (s, 1, updatekey.length);"/>
										<outline text="console.log (&quot;wsWatchForChange: update received along with &quot; + opmltext.length + &quot; chars of OPML text.&quot;);" created="Thu, 10 Jun 2021 12:56:13 GMT"/>
										<outline text="callback (undefined, opmlParse (opmltext));" created="Fri, 24 Sep 2021 17:59:03 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="};"/>
								</outline>
							<outline text="mySocket.onclose = function (evt) {">
								<outline text="mySocket = undefined;"/>
								<outline text="};"/>
								</outline>
							<outline text="mySocket.onerror = function (evt) {">
								<outline text="console.log (&quot;wsWatchForChange: socket for outline &quot; + urlOpmlFile + &quot; received an error.&quot;);" created="Wed, 31 Mar 2021 14:26:24 GMT"/>
								<outline text="};"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=" " created="Mon, 27 Sep 2021 17:56:38 GMT"/>
					<outline text="if (options === undefined) { //9/27/21 by DW" created="Mon, 27 Sep 2021 17:56:38 GMT">
						<outline text="options = {" created="Mon, 27 Sep 2021 17:56:50 GMT">
							<outline text="flSubscribe: false" created="Mon, 27 Sep 2021 17:57:55 GMT"/>
							<outline text="};" created="Mon, 27 Sep 2021 17:57:48 GMT"/>
							</outline>
						<outline text="}" created="Mon, 27 Sep 2021 17:56:46 GMT"/>
						</outline>
					<outline text="" created="Mon, 27 Sep 2021 17:56:39 GMT"/>
					<outline text="readHttpFile (urlOpmlFile, undefined, undefined, function (err, opmltext) {">
						<outline text="if (err) {" created="Fri, 24 Sep 2021 17:57:36 GMT">
							<outline text="callback (err);" created="Fri, 24 Sep 2021 17:57:38 GMT"/>
							<outline text="}" created="Fri, 24 Sep 2021 17:57:42 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 24 Sep 2021 17:57:44 GMT">
							<outline text="if (options.flSubscribe) {" created="Fri, 24 Sep 2021 18:07:37 GMT">
								<outline text="var theOutline = opmlParse (opmltext);" created="Fri, 24 Sep 2021 18:07:53 GMT"/>
								<outline text="urlSocketServer = theOutline.opml.head.urlUpdateSocket;" created="Sun, 13 Jun 2021 13:42:13 GMT"/>
								<outline text="wsWatchForChange (); //connect with socket server"/>
								<outline text="self.setInterval (wsWatchForChange, 1000); //make sure we stay connected"/>
								<outline text="callback (undefined, theOutline);" created="Fri, 24 Sep 2021 18:13:20 GMT"/>
								<outline text="}" created="Fri, 24 Sep 2021 18:07:46 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 24 Sep 2021 18:13:32 GMT">
								<outline text="callback (undefined, opmlParse (opmltext));" created="Fri, 24 Sep 2021 17:59:03 GMT"/>
								<outline text="}" created="Fri, 24 Sep 2021 18:13:35 GMT"/>
								</outline>
							<outline text="}" created="Fri, 24 Sep 2021 17:57:46 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 24 Sep 2021 17:51:42 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Tue, 06 Jul 2021 14:24:35 GMT"/>
			<outline text="examples/browser/code.js" created="Tue, 06 Jul 2021 14:24:35 GMT">
				<outline text="7/3/21; 3:27:01 PM by DW" isComment="true" created="Sat, 03 Jul 2021 19:27:01 GMT">
					<outline text="Read an OPML file over the web, parse it into a JavaScript object." created="Sat, 03 Jul 2021 19:27:51 GMT">
						<outline text="1. Display the JSON text for the object in the first box." created="Sat, 03 Jul 2021 19:28:13 GMT"/>
						<outline text="2. Convert the JavaScript object to OPML text, and display that in the second box." created="Sat, 03 Jul 2021 19:28:22 GMT"/>
						<outline text="3. Generate an HTML rendering of the JavaScript object and display in third box." created="Sat, 03 Jul 2021 19:29:05 GMT"/>
						</outline>
					<outline text="Also display, in the JavaScript console:" created="Sat, 03 Jul 2021 15:29:57 GMT">
						<outline text="The outline's title from the head section and " created="Sat, 03 Jul 2021 15:34:45 GMT"/>
						<outline text="The text of the third child of the second top level subhead of the United States." created="Sat, 03 Jul 2021 15:34:54 GMT"/>
						<outline text="Illustrates how you get data from the compiled structure." created="Sat, 03 Jul 2021 15:31:45 GMT"/>
						<outline text="Once you've compiled the OPML, you process it as a JavaScript object." created="Sat, 03 Jul 2021 15:35:25 GMT"/>
						<outline text="When you're done, you can serialize it with opml.stringify. " created="Sat, 03 Jul 2021 15:35:47 GMT"/>
						<outline text="By design, works like JSON, so every JS programmer should find this familiar. " created="Sat, 03 Jul 2021 15:36:02 GMT"/>
						</outline>
					<outline text="Visit every node in the outline, and convert the text to upper case." created="Sat, 03 Jul 2021 19:31:33 GMT"/>
					</outline>
				<outline text="const urlOpmlFile = &quot;http://drummer.scripting.com/davewiner/states.opml&quot;;" created="Fri, 02 Jul 2021 20:51:47 GMT"/>
				<outline text="" created="Fri, 02 Jul 2021 20:51:45 GMT"/>
				<outline text="function filledString (ch, ct) { //6/4/14 by DW">
					<outline text="var s = &quot;&quot;;"/>
					<outline text="for (var i = 0; i &lt; ct; i++) {">
						<outline text="s += ch;"/>
						<outline text="}"/>
						</outline>
					<outline text="return (s);"/>
					<outline text="}"/>
					</outline>
				<outline text="function encodeXml (s) { //7/15/14 by DW">
					<outline text="Changes" isComment="true">
						<outline text="12/14/15; 4:28:14 PM by DW">
							<outline text="Check for undefined, return empty string."/>
							</outline>
						</outline>
					<outline text="if (s === undefined) {">
						<outline text="return (&quot;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="var charMap = {" collapse="true">
							<outline text="'&lt;': '&amp;lt;',"/>
							<outline text="'&gt;': '&amp;gt;',"/>
							<outline text="'&amp;': '&amp;amp;',"/>
							<outline text="'&quot;': '&amp;'+'quot;'"/>
							<outline text="};"/>
							</outline>
						<outline text="s = s.toString();" created="Sat, 13 Apr 2013 20:25:04 GMT" pgfnum="1662"/>
						<outline text="s = s.replace(/\u00A0/g, &quot; &quot;);" created="Fri, 12 Apr 2013 21:27:40 GMT" pgfnum="1632"/>
						<outline text="var escaped = s.replace(/[&lt;&gt;&amp;&quot;]/g, function(ch) {" collapse="true">
							<outline text="return charMap [ch];"/>
							<outline text="});"/>
							</outline>
						<outline text="return escaped;" created="Thu, 07 Feb 2013 04:53:23 GMT" pgfnum="129"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readHttpFile (url, callback, timeoutInMilliseconds, headers) { //5/27/14 by DW">
					<outline text="Changes" isComment="true">
						<outline text="7/17/15; 10:43:16 AM by DW">
							<outline text="New optional param, headers."/>
							</outline>
						<outline text="12/14/14; 5:38:18 PM by DW">
							<outline text="Add optional timeoutInMilliseconds param."/>
							</outline>
						<outline text="5/29/14; 11:13:28 AM by DW">
							<outline text="On error, call the callback with an undefined parameter."/>
							</outline>
						<outline text="5/27/14; 8:31:21 AM by DW">
							<outline text="Simple asynchronous file read over http."/>
							</outline>
						</outline>
					<outline text="if (timeoutInMilliseconds === undefined) {">
						<outline text="timeoutInMilliseconds = 30000;"/>
						<outline text="}"/>
						</outline>
					<outline text="var jxhr = $.ajax ({ ">
						<outline text="url: url,"/>
						<outline text="dataType: &quot;text&quot;, "/>
						<outline text="headers: headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
						<outline text="timeout: timeoutInMilliseconds "/>
						<outline text="}) "/>
						</outline>
					<outline text=".success (function (data, status) { ">
						<outline text="callback (data);"/>
						<outline text="}) "/>
						</outline>
					<outline text=".error (function (status) { ">
						<outline text="for info about timeous see this page." isComment="true">
							<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
							</outline>
						<outline text="console.log (&quot;readHttpFile: url == &quot; + url + &quot;, error == &quot; + jsonStringify (status));" created="Sun, 13 Jan 2013 14:34:21 GMT" pgfnum="17098"/>
						<outline text="callback (undefined);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {" created="Fri, 02 Jul 2021 15:25:31 GMT">
					<outline text="console.log (&quot;startup&quot;);" created="Fri, 02 Jul 2021 20:50:44 GMT"/>
					<outline text="readHttpFile (urlOpmlFile, function (opmltext) {">
						<outline text="if (opmltext !== undefined) {" created="Fri, 02 Jul 2021 20:57:28 GMT">
							<outline text="var theOutline = opml.parse (opmltext);" created="Fri, 02 Jul 2021 20:57:53 GMT"/>
							<outline text="" created="Sat, 03 Jul 2021 19:22:33 GMT"/>
							<outline text="var jsontext = JSON.stringify (theOutline, undefined, 4);" created="Fri, 02 Jul 2021 21:11:59 GMT"/>
							<outline text="$(&quot;#idJsonViewer&quot;).text (jsontext);" created="Fri, 02 Jul 2021 21:01:28 GMT"/>
							<outline text="" created="Sat, 03 Jul 2021 19:24:40 GMT"/>
							<outline text="var xmltext = opml.stringify (theOutline);" created="Fri, 02 Jul 2021 21:11:59 GMT"/>
							<outline text="$(&quot;#idOpmlViewer&quot;).text (xmltext);" created="Fri, 02 Jul 2021 21:01:28 GMT"/>
							<outline text="" created="Fri, 02 Jul 2021 21:12:52 GMT"/>
							<outline text="var htmltext = opml.htmlify (theOutline);" created="Fri, 02 Jul 2021 21:02:23 GMT"/>
							<outline text="$(&quot;#idOutlineViewer&quot;).html (htmltext);" created="Fri, 02 Jul 2021 21:01:28 GMT"/>
							<outline text="" created="Sat, 03 Jul 2021 19:30:17 GMT"/>
							<outline text="console.log (&quot;\nThe outline's title is \&quot;&quot; + theOutline.opml.head.title + &quot;.\&quot;&quot;); //see comment at top" created="Sat, 03 Jul 2021 15:30:30 GMT"/>
							<outline text="console.log (&quot;The third state in the Great Plains is: \&quot;&quot; + theOutline.opml.body.subs [0].subs [1].subs [2].text + &quot;.\&quot;&quot;);" created="Sat, 03 Jul 2021 15:30:30 GMT"/>
							<outline text="" created="Sat, 03 Jul 2021 19:31:57 GMT"/>
							<outline text="opml.visitAll (theOutline, function (node) {" created="Sat, 03 Jul 2021 19:31:57 GMT">
								<outline text="node.text = node.text.toUpperCase ();" created="Sat, 03 Jul 2021 19:32:24 GMT"/>
								<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
								<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
								</outline>
							<outline text="console.log (opml.stringify (theOutline)); //view the uppercased outline in the JS console" created="Sat, 03 Jul 2021 19:38:29 GMT"/>
							<outline text="}" created="Fri, 02 Jul 2021 20:57:39 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 02 Jul 2021 20:50:43 GMT"/>
					</outline>
				</outline>
			<outline text="examples/browser/styles.css" created="Tue, 06 Jul 2021 14:24:35 GMT">
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 16px;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 60%;"/>
					<outline text="margin-top: 30px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-bottom: 400px;" created="Fri, 11 Jun 2021 12:29:37 GMT"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody h1 {">
					<outline text="margin-top: 20px;"/>
					<outline text="margin-bottom: 20px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody p {" created="Thu, 10 Jun 2021 12:24:39 GMT">
					<outline text="line-height: 140%;" created="Thu, 10 Jun 2021 12:24:43 GMT"/>
					<outline text="margin-bottom: 25px;" created="Sun, 04 Jul 2021 16:48:18 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 12:24:52 GMT"/>
					</outline>
				<outline text="" created="Sun, 13 Jun 2021 14:05:23 GMT"/>
				<outline text=".divOutlineViewer, .divJsonViewer,  .divOpmlViewer {" created="Thu, 10 Jun 2021 20:59:42 GMT">
					<outline text="margin-top: 15px;" created="Thu, 10 Jun 2021 12:59:54 GMT"/>
					<outline text="padding: 3px;" created="Thu, 10 Jun 2021 12:54:13 GMT"/>
					<outline text="border: 1px solid silver;" created="Thu, 10 Jun 2021 12:34:30 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 20:59:45 GMT"/>
					</outline>
				<outline text=".divOutlineViewer li {" created="Thu, 10 Jun 2021 20:59:42 GMT">
					<outline text="padding-top: 3px;" created="Thu, 10 Jun 2021 12:54:13 GMT"/>
					<outline text="padding-bottom: 3px;" created="Thu, 10 Jun 2021 12:54:13 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 20:59:45 GMT"/>
					</outline>
				<outline text=".divOutlineViewer ul {" created="Thu, 10 Jun 2021 20:59:42 GMT">
					<outline text="list-style-type: circle;" created="Thu, 10 Jun 2021 21:04:33 GMT"/>
					<outline text="}" created="Thu, 10 Jun 2021 20:59:45 GMT"/>
					</outline>
				<outline text="" created="Fri, 11 Jun 2021 12:10:22 GMT"/>
				</outline>
			<outline text="examples/browser/index.html" created="Tue, 06 Jul 2021 14:24:35 GMT">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;OPML client demo&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;script src=&quot;http://scripting.com/code/includes/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;http://scripting.com/code/includes/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;link href=&quot;//fonts.googleapis.com/css?family=Ubuntu:400,500i,700&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;script src=&quot;http://scripting.com/code/opmlpackage/client/opml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;p&gt;This is part of the &lt;a href=&quot;https://github.com/scripting/opmlPackage&quot;&gt;OPML package&lt;/a&gt;.&lt;/p&gt;" created="Sun, 04 Jul 2021 16:37:41 GMT"/>
							<outline text="&lt;h1&gt;OPML client demo&lt;/h1&gt;" created="Sun, 04 Jul 2021 16:31:29 GMT"/>
							<outline text="&lt;p&gt;Below, we display the &lt;a href=&quot;http://drummer.scripting.com/davewiner/states.opml&quot;&gt;States&lt;/a&gt; outline as a &lt;a href=&quot;#json&quot;&gt;JavaScript&lt;/a&gt; object, a simple &lt;a href=&quot;#html&quot;&gt;HTML&lt;/a&gt; rendering and as an &lt;a href=&quot;#opml&quot;&gt;OPML&lt;/a&gt; file.&lt;/p&gt;" created="Sun, 04 Jul 2021 16:37:41 GMT"/>
							<outline text="&lt;a name=&quot;json&quot;&gt;&lt;/a&gt;&lt;pre class=&quot;divJsonViewer&quot; id=&quot;idJsonViewer&quot;&gt;" created="Fri, 02 Jul 2021 21:02:41 GMT">
								<outline text="&lt;/pre&gt;" created="Fri, 02 Jul 2021 21:02:45 GMT"/>
								</outline>
							<outline text="&lt;a name=&quot;html&quot;&gt;&lt;/a&gt;&lt;div class=&quot;divOutlineViewer&quot; id=&quot;idOutlineViewer&quot;&gt;" created="Fri, 02 Jul 2021 21:02:41 GMT">
								<outline text="&lt;/div&gt;" created="Fri, 02 Jul 2021 21:02:45 GMT"/>
								</outline>
							<outline text="&lt;a name=&quot;opml&quot;&gt;&lt;/a&gt;&lt;pre class=&quot;divOpmlViewer&quot; id=&quot;idOpmlViewer&quot;&gt;" created="Fri, 02 Jul 2021 21:09:53 GMT">
								<outline text="&lt;/pre&gt;" created="Fri, 02 Jul 2021 21:09:59 GMT"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="" created="Tue, 06 Jul 2021 14:24:36 GMT"/>
			<outline text="readme.md" created="Fri, 02 Jul 2021 14:57:47 GMT">
				<outline text="# opml package" created="Fri, 02 Jul 2021 14:57:50 GMT">
					<outline text="A developer's toolkit for OPML support. Node and browser-based JavaScript code that reads and writes OPML." created="Sun, 04 Jul 2021 17:13:30 GMT"/>
					</outline>
				<outline text="#### What is OPML and why should we use it?" created="Sun, 04 Jul 2021 16:08:57 GMT">
					<outline text="OPML is an XML-based format designed to store and exchange outlines with attributes. " created="Sun, 04 Jul 2021 16:09:06 GMT"/>
					<outline text="It's been around since the &lt;a href=&quot;http://scripting.com/davenet/2000/09/24/opml10.html&quot;&gt;early 2000s&lt;/a&gt;, and is widely used in the RSS world to exchange subscription lists. " created="Sun, 04 Jul 2021 16:09:35 GMT"/>
					<outline text="It's also a standard for interop among outliners. If you support OPML, our products will interop, and our users will be able to use all our products on their data. " created="Sun, 04 Jul 2021 16:10:07 GMT"/>
					</outline>
				<outline text="#### Why this package?" created="Sun, 04 Jul 2021 16:17:23 GMT">
					<outline text="I wanted to make it really easy for developers to add basic OPML support to their apps." created="Sun, 04 Jul 2021 16:17:31 GMT"/>
					<outline text="So I put the basic code you need to read and write OPML files, code that's debugged, used in other apps, including my own. It's known to work, to respect the format, and be easy to deploy." created="Sun, 04 Jul 2021 16:18:27 GMT"/>
					<outline text="There are other ways to read OPML, and that's very good. The more support there is, the more interop and that's the goal. I'm going to accumulate links to resources for OPML developers. If you have something you think they could use, send me an email at the address in the package.json file above. " created="Sun, 04 Jul 2021 16:19:08 GMT"/>
					<outline text="I recorded a &lt;a href=&quot;http://scripting.com/2021/07/04/myPitchForOpml.m4a&quot;&gt;podcast&lt;/a&gt; explaining all this. :-)" created="Sun, 04 Jul 2021 17:44:59 GMT"/>
					</outline>
				<outline text="#### What's in this package?" created="Sun, 04 Jul 2021 16:11:18 GMT">
					<outline text="JavaScript code to parse and stringify OPML." created="Sun, 04 Jul 2021 16:11:35 GMT">
						<outline text="* opml.parse -- turns OPML text into a JavaScript structure representing the OPML." created="Sun, 04 Jul 2021 23:18:03 GMT"/>
						<outline text="* opml.stringify -- takes the JavaScript structure and turns it into OPML text." created="Sun, 04 Jul 2021 23:18:10 GMT"/>
						<outline text="* opml.htmlify -- a simple routine to display outlines in HTML." created="Sun, 04 Jul 2021 23:16:21 GMT"/>
						<outline text="* opml.visitAll -- a routine that visits all the nodes in an outline." created="Sun, 04 Jul 2021 23:16:27 GMT"/>
						</outline>
					</outline>
				<outline text="#### The Node package" created="Sat, 03 Jul 2021 20:14:58 GMT">
					<outline text="It's on &lt;a href=&quot;https://www.npmjs.com/package/opml&quot;&gt;NPM&lt;/a&gt;, it's called OPML." created="Sat, 03 Jul 2021 20:15:04 GMT"/>
					<outline text="Here's a snippet that reads an OPML file, converts it to a JavaScript object, displays it to the console via JSON.stringify." created="Sat, 03 Jul 2021 20:15:15 GMT">
						<outline text="&lt;%includeExample (&quot;example1&quot;)%&gt;"/>
						</outline>
					<outline text="The full Node example is &lt;a href=&quot;https://github.com/scripting/opmlPackage/blob/main/examples/parsing/test.js&quot;&gt;here&lt;/a&gt;. " created="Sat, 03 Jul 2021 20:32:48 GMT"/>
					</outline>
				<outline text="#### OPML in the browser" created="Sat, 03 Jul 2021 20:33:29 GMT">
					<outline text="The same routines are available for JavaScript code running in the browser. " created="Sat, 03 Jul 2021 20:33:39 GMT"/>
					<outline text="See the &lt;a href=&quot;https://github.com/scripting/opmlPackage/tree/main/client&quot;&gt;example&lt;/a&gt;. You have to include &lt;a href=&quot;e/blob/main/client/opml.js&quot;&gt;opml.js&lt;/a&gt; in your app, as the example does. " created="Sat, 03 Jul 2021 20:34:11 GMT"/>
					<outline text="You can &lt;a href=&quot;http://scripting.com/code/opmlpackage/examples/browser/&quot;&gt;run the example&lt;/a&gt; right now, without downloading the repo." created="Sun, 04 Jul 2021 16:43:50 GMT"/>
					<outline text="The &lt;a href=&quot;https://github.com/scripting/opmlPackage/tree/main/examples/browser&quot;&gt;example app&lt;/a&gt; includes the Bootstrap Toolkit, the Ubuntu font and jQuery. The OPML parsing and generating code does not depend on the first two, they're just used in the example app. opml.js uses jQuery, but otherwise should be completely self-contained, i.e. it does not depend on any other files." created="Sun, 04 Jul 2021 16:22:10 GMT"/>
					</outline>
				<outline text="#### Other OPML projects" created="Sun, 04 Jul 2021 16:34:50 GMT">
					<outline text="I have a few OPML-related projects on GitHub and on the web. " created="Sun, 04 Jul 2021 16:34:57 GMT">
						<outline text="* &lt;a href=&quot;http://drummer.scripting.com/&quot;&gt;Drummer&lt;/a&gt; -- Browser and Electron-based outliner that uses OPML as its native format. " created="Sun, 04 Jul 2021 16:35:32 GMT"/>
						<outline text="* &lt;a href=&quot;http://this.how/opmlChecklist/&quot;&gt;OPML Developer checklist&lt;/a&gt;. Examples, source code and advice for people adapting outliners to read and write OPML." created="Mon, 05 Jul 2021 12:59:51 GMT"/>
						<outline text="* &lt;a href=&quot;https://github.com/scripting/instantOutlines&quot;&gt;instantOutlines&lt;/a&gt; -- Example code for sharing live-updated outlines between users, using websockets as the notification system." created="Sun, 04 Jul 2021 16:35:22 GMT"/>
						<outline text="* &lt;a href=&quot;http://dev.opml.org/spec2.html&quot;&gt;OPML 2.0 spec&lt;/a&gt;." created="Mon, 05 Jul 2021 12:59:32 GMT"/>
						<outline text="* etc." created="Sun, 04 Jul 2021 16:37:12 GMT"/>
						</outline>
					</outline>
				<outline text="#### Updates" created="Sun, 04 Jul 2021 16:34:50 GMT">
					<outline text="#### v0.5.0 -- 10/25/22 by DW" created="Tue, 25 Oct 2022 16:32:44 GMT">
						<outline text="New function -- opml.readOutline. A simple bit of recurring code. Reads an outline over the web returns a standard outline object. " created="Wed, 11 May 2022 15:00:50 GMT"/>
						<outline text="It's time to start a fresh sequence of versions with 0.5.0. No breakage, of course. ;-)" created="Tue, 25 Oct 2022 16:33:34 GMT"/>
						</outline>
					<outline text="#### v0.4.24 -- 5/11/22 by DW" created="Wed, 11 May 2022 15:00:49 GMT">
						<outline text="New function -- opml.expandIncludes." created="Wed, 11 May 2022 15:00:50 GMT"/>
						<outline text="Takes two params, an outline that could possibly have include nodes, and a callback, that receives a copy of the outline with includes expanded. " created="Wed, 11 May 2022 15:02:03 GMT"/>
						<outline text="It doesn't stop for errors. This was much-debated internally, but there is linkrot and an outline with includes should work as well as it possibly can, as a blog with one broken link still works." created="Wed, 11 May 2022 15:02:59 GMT"/>
						<outline text="It is only available in the Node version, but it could be adapted to work in the client if opml.expandInclude (sic) is converted. " created="Wed, 11 May 2022 15:11:07 GMT"/>
						<outline text="BTW, sorry for the closeness in the names, expandInclude and expandIncludes, but it is correct, one is singular and the other is plural. " created="Wed, 11 May 2022 15:11:34 GMT"/>
						</outline>
					<outline text="#### v0.4.23 -- 3/18/22 by DW" created="Fri, 18 Mar 2022 15:28:34 GMT">
						<outline text="opml.visitAll is now defined in both the Node and browser versions. Previously it was only defined in browser version." created="Fri, 18 Mar 2022 15:28:35 GMT"/>
						</outline>
					<outline text="#### v0.4.22 -- 1/12/22 by DW" created="Wed, 12 Jan 2022 22:22:24 GMT">
						<outline text="New optional param on markdownToOutline, options, an object. " created="Wed, 12 Jan 2022 22:22:25 GMT"/>
						<outline text="And options.flAddUnderscores, defaults true. If true, we add underscores before attribute names coming from the markdown, so we know to restore them when converting back to markdown." created="Wed, 12 Jan 2022 22:22:54 GMT"/>
						<outline text="But sometimes the outline is going to OPML, and on to a processor where you want it to recognize its name without the underscore. " created="Wed, 12 Jan 2022 22:23:38 GMT"/>
						<outline text="When we're publishing a blog from a LogSeq markdown outline is an example. " created="Wed, 12 Jan 2022 22:24:09 GMT"/>
						</outline>
					<outline text="#### v0.4.21 -- 1/8/22 by DW" created="Sat, 08 Jan 2022 16:01:59 GMT">
						<outline text="There was some confusion about whether or not we should try to handle head-level atts in the markdown format, and in the end I decided not to try to do that at this time. Before doing this I have to understand much better what's going on on the other side of the interop. At this stage, whatever I do is going to be wrong, and will have to be grandfathered in for perpetuity. We have a pretty good ability to interop on the content of the outlines, but different products see the file-level metadata very differently. If there ever is an agreement on how this should work it's going to happen later. " created="Sat, 08 Jan 2022 16:02:00 GMT"/>
						<outline text="However I did fix a problem, if a head-level att does appear as we import, we don't try to attach it to undefined. " created="Sat, 08 Jan 2022 16:05:13 GMT"/>
						</outline>
					<outline text="#### v0.4.17 -- 1/4/22 by DW" created="Tue, 04 Jan 2022 22:56:12 GMT">
						<outline text="Added expandInclude in Node package. " created="Tue, 04 Jan 2022 22:56:13 GMT"/>
						</outline>
					<outline text="#### v0.4.15 -- 1/4/22 by DW" created="Tue, 04 Jan 2022 18:14:38 GMT">
						<outline text="Last night's release only worked in the client version. The Node package was broken. It should now be fixed. " created="Tue, 04 Jan 2022 18:14:46 GMT"/>
						<outline text="Also added a new &lt;a href=&quot;https://github.com/scripting/opmlPackage/tree/main/examples/markdown&quot;&gt;example app&lt;/a&gt; that demonstrates the reading and writing of markdown/outline files in a Node app. " created="Tue, 04 Jan 2022 18:15:12 GMT"/>
						</outline>
					<outline text="#### v0.4.12 -- 1/3/22 by DW" created="Mon, 03 Jan 2022 23:28:03 GMT">
						<outline text="Two new routines, opml.markdownToOutline and opml.outlineToMarkdown, to read and write markdown files that are used to represent outlines. This is an extended Markdown that LogSeq generates. The format does not have a name at this time, or as far as I know, a spec, but at least now there is JavaScript code that reads and writes the format. " created="Mon, 03 Jan 2022 23:28:15 GMT"/>
						<outline text="We are using this code in a new version of Drummer in the works. " created="Mon, 03 Jan 2022 23:30:24 GMT"/>
						<outline text="It is being discussed in this &lt;a href=&quot;https://github.com/scripting/drummerRFC/issues/4#issuecomment-1004157802&quot;&gt;thread&lt;/a&gt;. " created="Mon, 03 Jan 2022 23:30:39 GMT"/>
						</outline>
					<outline text="#### v0.4.10 -- 9/24/21 by DW" created="Fri, 24 Sep 2021 18:20:47 GMT">
						<outline text="New entry-point in the &lt;a href=&quot;https://github.com/scripting/opmlPackage/blob/main/client/opml.js&quot;&gt;client&lt;/a&gt;, opml.read. " created="Fri, 24 Sep 2021 18:18:34 GMT"/>
						<outline text="Reads an OPML file, returns a JavaScript object with the outline head and structure." created="Fri, 24 Sep 2021 18:18:56 GMT"/>
						<outline text="If options.flSubscribe is true, we ask to be notified when the file changes over a websocket. " created="Fri, 24 Sep 2021 18:19:17 GMT"/>
						<outline text="We call back to the same routine we called when the file was read, assuming it will do the same thing with the updated OPML." created="Fri, 24 Sep 2021 18:22:41 GMT"/>
						</outline>
					</outline>
				<outline text="#### Questions, comments?" created="Sun, 04 Jul 2021 16:07:12 GMT">
					<outline text="If you have any questions or comments please post an issue &lt;a href=&quot;https://github.com/scripting/opmlPackage/issues&quot;&gt;here&lt;/a&gt;. " created="Sun, 04 Jul 2021 16:07:20 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Fri, 02 Jul 2021 14:50:21 GMT">
			<outline text="nodeEditorSuite.utilities.buildOpmlPackage ();" created="Fri, 02 Jul 2021 14:50:25 GMT"/>
			</outline>
		</body>
	</opml>
